"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.criticalThinkingLogMiddleware = exports.strictCriticalThinkingMiddleware = exports.criticalThinkingMiddleware = void 0;
exports.generateValidationHeaders = generateValidationHeaders;
exports.validateResponse = validateResponse;
const criticalThinkingMiddleware = (req, res, next) => {
    try {
        // Extrair informa√ß√µes da requisi√ß√£o
        const action = {
            type: req.method + '_' + req.path,
            description: `Requisi√ß√£o ${req.method} para ${req.path}`,
            data: req.body || {},
            source: {
                verified: req.headers['x-source-verified'] === 'true',
                url: req.headers['x-source-url'] || null
            },
            assumptions: {
                identified: req.headers['x-assumptions-identified'] === 'true',
                questioned: req.headers['x-assumptions-questioned'] === 'true',
                validated: req.headers['x-assumptions-validated'] === 'true'
            },
            logic: {
                tested: req.headers['x-logic-tested'] === 'true',
                validated: req.headers['x-logic-validated'] === 'true',
                consistent: req.headers['x-logic-consistent'] === 'true'
            },
            alternatives: {
                considered: req.headers['x-alternatives-considered'] === 'true',
                perspectives: req.headers['x-alternatives-perspectives'] === 'true',
                creative: req.headers['x-alternatives-creative'] === 'true'
            },
            transparent: {
                documented: req.headers['x-transparent-documented'] === 'true',
                justified: req.headers['x-transparent-justified'] === 'true',
                clear: req.headers['x-transparent-clear'] === 'true'
            },
            honest: {
                declared: req.headers['x-honest-declared'] === 'true',
                errors: req.headers['x-honest-errors'] === 'true',
                uncertainty: req.headers['x-honest-uncertainty'] === 'true'
            }
        };
        const context = {
            user: req.user || 'anonymous',
            timestamp: new Date().toISOString(),
            ip: req.ip || 'unknown',
            userAgent: req.get('User-Agent'),
            headers: req.headers
        };
        // Valida√ß√£o b√°sica de pensamento cr√≠tico
        validateCriticalThinking(action, context);
        // Adicionar informa√ß√µes de valida√ß√£o √† requisi√ß√£o
        req.criticalThinkingValidated = true;
        req.criticalThinkingContext = context;
        next();
    }
    catch (error) {
        console.error('üö® VIOLA√á√ÉO DAS DIRETIVAS DE PENSAMENTO CR√çTICO:', error.message);
        res.status(400).json({
            error: 'VIOLA√á√ÉO DAS DIRETIVAS DE PENSAMENTO CR√çTICO',
            message: 'Esta requisi√ß√£o n√£o segue as diretivas de pensamento cr√≠tico obrigat√≥rias',
            details: error.message,
            required: 'Corre√ß√£o obrigat√≥ria antes de prosseguir',
            timestamp: new Date().toISOString(),
            headers: {
                'x-source-verified': 'true',
                'x-assumptions-identified': 'true',
                'x-assumptions-questioned': 'true',
                'x-assumptions-validated': 'true',
                'x-logic-tested': 'true',
                'x-logic-validated': 'true',
                'x-logic-consistent': 'true',
                'x-alternatives-considered': 'true',
                'x-alternatives-perspectives': 'true',
                'x-alternatives-creative': 'true',
                'x-transparent-documented': 'true',
                'x-transparent-justified': 'true',
                'x-transparent-clear': 'true',
                'x-honest-declared': 'true'
            }
        });
    }
};
exports.criticalThinkingMiddleware = criticalThinkingMiddleware;
/**
 * MIDDLEWARE SIMPLIFICADO PARA ROTAS CR√çTICAS
 *
 * Para rotas que requerem valida√ß√£o mais rigorosa
 */
const strictCriticalThinkingMiddleware = (req, res, next) => {
    try {
        // Valida√ß√£o mais rigorosa para rotas cr√≠ticas
        const requiredHeaders = [
            'x-source-verified',
            'x-assumptions-identified',
            'x-logic-tested',
            'x-transparent-documented'
        ];
        const missingHeaders = requiredHeaders.filter(header => req.headers[header] !== 'true');
        if (missingHeaders.length > 0) {
            throw new Error(`Headers obrigat√≥rios ausentes: ${missingHeaders.join(', ')}`);
        }
        criticalThinkingMiddleware(req, res, next);
    }
    catch (error) {
        console.error('üö® VALIDA√á√ÉO RIGOROSA FALHOU:', error.message);
        res.status(400).json({
            error: 'VALIDA√á√ÉO RIGOROSA FALHOU',
            message: 'Esta rota requer valida√ß√£o rigorosa de pensamento cr√≠tico',
            details: error.message,
            required: 'Todos os headers de valida√ß√£o s√£o obrigat√≥rios',
            timestamp: new Date().toISOString()
        });
    }
};
exports.strictCriticalThinkingMiddleware = strictCriticalThinkingMiddleware;
/**
 * MIDDLEWARE DE LOG PARA PENSAMENTO CR√çTICO
 *
 * Registra todas as valida√ß√µes para auditoria
 */
const criticalThinkingLogMiddleware = (req, res, next) => {
    const startTime = Date.now();
    // Interceptar a resposta para logging
    const originalSend = res.send;
    res.send = function (data) {
        const endTime = Date.now();
        const duration = endTime - startTime;
        const logData = {
            timestamp: new Date().toISOString(),
            method: req.method,
            path: req.path,
            statusCode: res.statusCode,
            duration: `${duration}ms`,
            criticalThinkingValidated: req.criticalThinkingValidated || false,
            userAgent: req.get('User-Agent'),
            ip: req.ip
        };
        console.log('üìä LOG PENSAMENTO CR√çTICO:', JSON.stringify(logData, null, 2));
        return originalSend.call(this, data);
    };
    next();
};
exports.criticalThinkingLogMiddleware = criticalThinkingLogMiddleware;
/**
 * FUN√á√ÉO DE VALIDA√á√ÉO DE PENSAMENTO CR√çTICO
 */
function validateCriticalThinking(action, context) {
    const errors = [];
    // Validar fonte
    if (!action.source.verified) {
        errors.push('Fonte n√£o verificada');
    }
    // Validar suposi√ß√µes
    if (!action.assumptions.identified) {
        errors.push('Suposi√ß√µes n√£o identificadas');
    }
    if (!action.assumptions.questioned) {
        errors.push('Suposi√ß√µes n√£o questionadas');
    }
    // Validar l√≥gica
    if (!action.logic.tested) {
        errors.push('L√≥gica n√£o testada');
    }
    if (!action.logic.validated) {
        errors.push('L√≥gica n√£o validada');
    }
    // Validar alternativas
    if (!action.alternatives.considered) {
        errors.push('Alternativas n√£o consideradas');
    }
    // Validar transpar√™ncia
    if (!action.transparent.documented) {
        errors.push('Processo n√£o documentado');
    }
    // Validar honestidade
    if (!action.honest.declared) {
        errors.push('Incertezas n√£o declaradas');
    }
    if (errors.length > 0) {
        throw new Error(`Valida√ß√£o de pensamento cr√≠tico falhou: ${errors.join(', ')}`);
    }
}
/**
 * GERADOR DE HEADERS DE VALIDA√á√ÉO
 */
function generateValidationHeaders(options = {}) {
    const headers = {
        'x-source-verified': 'true',
        'x-assumptions-identified': 'true',
        'x-assumptions-questioned': 'true',
        'x-assumptions-validated': 'true',
        'x-logic-tested': 'true',
        'x-logic-validated': 'true',
        'x-logic-consistent': 'true',
        'x-alternatives-considered': 'true',
        'x-alternatives-perspectives': 'true',
        'x-alternatives-creative': 'true',
        'x-transparent-documented': 'true',
        'x-transparent-justified': 'true',
        'x-transparent-clear': 'true',
        'x-honest-declared': 'true',
        'x-honest-errors': 'false',
        'x-honest-uncertainty': 'false'
    };
    return headers;
}
/**
 * VALIDADOR DE RESPOSTA
 */
function validateResponse(response, context = {}) {
    try {
        // Validar se a resposta tem estrutura adequada
        if (!response || typeof response !== 'object') {
            return false;
        }
        // Validar se tem campos obrigat√≥rios
        if (response.success === undefined) {
            return false;
        }
        // Validar se mensagens de erro s√£o claras
        if (!response.success && !response.message) {
            return false;
        }
        return true;
    }
    catch (error) {
        console.error('Erro na valida√ß√£o de resposta:', error);
        return false;
    }
}
