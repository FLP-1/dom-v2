name: CI/CD Pipeline - DOM v2

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'

jobs:
  # Job de Valida√ß√£o B√°sica
  validate:
    name: üîç Valida√ß√£o B√°sica
    runs-on: ubuntu-latest
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4
      
    - name: üì¶ Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: üì• Install root dependencies
      run: npm ci
        
    - name: üì• Install backend dependencies
      run: cd backend && npm ci
        
    - name: üì• Install frontend dependencies
      run: cd frontend && npm ci
        
    - name: üîç Build backend
      run: cd backend && npm run build
        
    - name: üîç Lint frontend
      run: cd frontend && npm run lint
        
    - name: üîç Security audit
      run: npm audit --audit-level moderate || echo "Security audit completed"

  # Job de Testes
  test:
    name: üß™ Testes
    runs-on: ubuntu-latest
    needs: validate
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4
      
    - name: üì¶ Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: üì• Install root dependencies
      run: npm ci
        
    - name: üì• Install backend dependencies
      run: cd backend && npm ci
        
    - name: üì• Install frontend dependencies
      run: cd frontend && npm ci
        
    - name: üß™ Backend tests
      run: cd backend && npm test
        
    - name: üß™ Frontend tests
      run: cd frontend && npm test
        
    - name: üìä Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: |
          backend/coverage/
          frontend/coverage/
        retention-days: 30

  # Job de Build
  build:
    name: üèóÔ∏è Build
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4
      
    - name: üì¶ Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: üì• Install root dependencies
      run: npm ci
        
    - name: üì• Install backend dependencies
      run: cd backend && npm ci
        
    - name: üì• Install frontend dependencies
      run: cd frontend && npm ci
        
    - name: üèóÔ∏è Build backend
      run: cd backend && npm run build
        
    - name: üèóÔ∏è Build frontend web
      run: cd frontend && npm run build:web
        
    - name: üì¶ Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: |
          backend/dist/
          frontend/web-build/
        retention-days: 30

  # Job de Status Final
  status:
    name: ‚úÖ Status Final
    runs-on: ubuntu-latest
    needs: [validate, test, build]
    if: always()
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4
      
    - name: üì¶ Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: üì• Install dependencies
      run: npm ci
        
    - name: ‚úÖ Generate status report
      run: |
        echo "## üéâ DOM v2 CI/CD Pipeline Status" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### ‚úÖ Jobs Conclu√≠dos:" >> $GITHUB_STEP_SUMMARY
        echo "- **Valida√ß√£o:** ${{ needs.validate.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Testes:** ${{ needs.test.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Build:** ${{ needs.build.result }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üìä Resumo:" >> $GITHUB_STEP_SUMMARY
        if [ "${{ needs.validate.result }}" == "success" ] && [ "${{ needs.test.result }}" == "success" ] && [ "${{ needs.build.result }}" == "success" ]; then
          echo "üéØ **TODOS OS JOBS PASSARAM!**" >> $GITHUB_STEP_SUMMARY
          echo "‚úÖ Sistema pronto para deploy" >> $GITHUB_STEP_SUMMARY
        else
          echo "‚ö†Ô∏è **ALGUNS JOBS FALHARAM**" >> $GITHUB_STEP_SUMMARY
          echo "üîß Verificar logs para detalhes" >> $GITHUB_STEP_SUMMARY
        fi
        
    - name: üì¢ Notify completion
      run: |
        if [ "${{ needs.validate.result }}" == "success" ] && [ "${{ needs.test.result }}" == "success" ] && [ "${{ needs.build.result }}" == "success" ]; then
          echo "‚úÖ Pipeline conclu√≠do com sucesso!"
        else
          echo "‚ùå Pipeline falhou - verificar logs"
          exit 1
        fi 