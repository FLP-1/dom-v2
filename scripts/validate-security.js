#!/usr/bin/env node

/**
 * Valida√ß√£o de Seguran√ßa - DOM v2
 * Valida aspectos de seguran√ßa do c√≥digo
 */

const fs = require('fs');
const path = require('path');

console.log(`[${new Date().toISOString()}] ` + 'üîç INICIANDO VALIDA√á√ÉO DE SEGURAN√áA');
console.log(`[${new Date().toISOString()}] ` + '========================================');

// Fun√ß√£o principal de valida√ß√£o
function validateValida√ß√£odeSeguran√ßa() {
    console.log(`[${new Date().toISOString()}] ` + 'üìä Analisando valida aspectos de seguran√ßa do c√≥digo...');
    
    const results = {
        status: 'success',
        score: 0,
        issues: [],
        recommendations: [],
        details: {}
    };
    
    try {
        
        // Validar seguran√ßa do c√≥digo
        const packageJson = JSON.parse(fs.readFileSync(path.join(__dirname, '..', 'package.json'), 'utf8'));
        
        // Verificar depend√™ncias com vulnerabilidades conhecidas
        const vulnerableDeps = ['express', 'lodash'];
        const deps = Object.keys(packageJson.dependencies || {});
        
        vulnerableDeps.forEach(dep => {
            if (deps.includes(dep)) {
                results.issues.push(`Depend√™ncia potencialmente vulner√°vel: ${dep}`);
                results.recommendations.push(`Verificar vers√£o mais recente de ${dep}`);
            }
        });
        
        // Verificar configura√ß√µes de seguran√ßa
        const securityConfigs = ['helmet', 'cors', 'rate-limit'];
        securityConfigs.forEach(config => {
            if (!deps.includes(config)) {
                results.recommendations.push(`Considerar adicionar ${config} para seguran√ßa`);
            }
        });
        
        results.recommendations.push('Implementar an√°lise de vulnerabilidades');
        results.recommendations.push('Adicionar valida√ß√£o de entrada de dados');
            
        
        // Calcular score baseado nos resultados
        results.score = calculateScore(results);
        
    } catch (error) {
        results.status = 'error';
        results.issues.push(`Erro durante valida√ß√£o: ${error.message}`);
    }
    
    return results;
}

// Fun√ß√£o para calcular score
function calculateScore(results) {
    let score = 100;
    
    // Deduzir pontos por cada issue
    score -= results.issues.length * 10;
    
    // Garantir score m√≠nimo
    return Math.max(0, Math.min(100, score));
}

// Executar valida√ß√£o
const result = validateValida√ß√£odeSeguran√ßa();

console.log(`[${new Date().toISOString()}] ` + '\nüìä RESULTADOS:');
console.log(`[${new Date().toISOString()}] ` + `   Status: ${result.status}`);
console.log(`[${new Date().toISOString()}] ` + `   Score: ${result.score}/100`);

if (result.issues.length > 0) {
    console.log(`[${new Date().toISOString()}] ` + '   Issues encontradas:');
    result.issues.forEach(issue => console.log(`[${new Date().toISOString()}] ` + `     - ${issue}`));
}

if (result.recommendations.length > 0) {
    console.log(`[${new Date().toISOString()}] ` + '   Recomenda√ß√µes:');
    result.recommendations.forEach(rec => console.log(`[${new Date().toISOString()}] ` + `     - ${rec}`));
}

console.log(`[${new Date().toISOString()}] ` + '\n‚úÖ VALIDA√á√ÉO DE SEGURAN√áA CONCLU√çDA!');

module.exports = {
    validateValida√ß√£odeSeguran√ßa,
    calculateScore
};

