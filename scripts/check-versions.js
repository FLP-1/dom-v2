/**
 * @fileoverview Validador de Vers√µes DOM v2
 * @directory scripts
 * @description Verifica compatibilidades e vers√µes m√≠nimas
 * @created 2024-12-19
 * @lastModified 2024-12-19
 * @author DOM Team v2
 */

const fs = require('fs');
const { execSync } = require('child_process');

class VersionChecker {
  constructor() {
    this.errors = [];
    this.warnings = [];
    this.success = [];
  }

  // Verificar vers√£o do Node.js
  checkNodeVersion() {
    console.log(`[${new Date().toISOString()}] ` + 'üîç Verificando vers√£o do Node.js...');

    try {
      const nodeVersion = process.version;
      const majorVersion = parseInt(nodeVersion.slice(1).split('.')[0]);

      if (majorVersion < 18) {
        this.errors.push(`‚ùå Node.js ${nodeVersion} - Vers√£o m√≠nima: 18.x`);
      } else if (majorVersion < 20) {
        this.warnings.push(`‚ö†Ô∏è Node.js ${nodeVersion} - Recomendado: 20.x`);
      } else {
        this.success.push(`‚úÖ Node.js ${nodeVersion} - Vers√£o adequada`);
      }
    } catch (error) {
      this.errors.push('‚ùå Erro ao verificar vers√£o do Node.js');
    }
  }

  // Verificar vers√£o do npm
  checkNpmVersion() {
    console.log(`[${new Date().toISOString()}] ` + 'üì¶ Verificando vers√£o do npm...');

    try {
      const npmVersion = execSync('npm --version', { encoding: 'utf8' }).trim();
      const majorVersion = parseInt(npmVersion.split('.')[0]);

      if (majorVersion < 8) {
        this.errors.push(`‚ùå npm ${npmVersion} - Vers√£o m√≠nima: 8.x`);
      } else if (majorVersion < 9) {
        this.warnings.push(`‚ö†Ô∏è npm ${npmVersion} - Recomendado: 9.x`);
      } else {
        this.success.push(`‚úÖ npm ${npmVersion} - Vers√£o adequada`);
      }
    } catch (error) {
      this.warnings.push('‚ö†Ô∏è Erro ao verificar vers√£o do npm');
    }
  }

  // Verificar depend√™ncias do backend
  checkBackendDependencies() {
    console.log(`[${new Date().toISOString()}] ` + 'üîß Verificando depend√™ncias do backend...');

    try {
      const packageJson = JSON.parse(fs.readFileSync('backend/package.json', 'utf8'));

      const requiredDeps = {
        'express': '^4.18.0',
        'typescript': '^5.0.0',
        'cors': '^2.8.5'
      };

      Object.entries(requiredDeps).forEach(([dep, minVersion]) => {
        const currentVersion = packageJson.dependencies?.[dep];

        if (!currentVersion) {
          this.errors.push(`‚ùå Depend√™ncia ausente: ${dep}`);
        } else if (!this.isVersionCompatible(currentVersion, minVersion)) {
          this.errors.push(`‚ùå Vers√£o incompat√≠vel de ${dep}: ${currentVersion} (m√≠nimo: ${minVersion})`);
        } else {
          this.success.push(`‚úÖ ${dep}: ${currentVersion} - Vers√£o compat√≠vel`);
        }
      });

      // Verificar depend√™ncias cr√≠ticas adicionais
      const criticalDeps = ['@types/node', '@types/express', '@types/cors'];
      criticalDeps.forEach(dep => {
        if (!packageJson.devDependencies?.[dep] && !packageJson.dependencies?.[dep]) {
          this.warnings.push(`‚ö†Ô∏è Depend√™ncia de tipos ausente: ${dep}`);
        }
      });

      // Verificar se Prisma est√° configurado
      if (!packageJson.dependencies?.prisma && !packageJson.devDependencies?.prisma) {
        this.warnings.push('‚ö†Ô∏è Prisma n√£o configurado - banco de dados n√£o implementado');
      } else {
        this.success.push('‚úÖ Prisma configurado');
      }

    } catch (error) {
      this.errors.push('‚ùå Erro ao verificar depend√™ncias do backend');
    }
  }

  // Verificar depend√™ncias do frontend
  checkFrontendDependencies() {
    console.log(`[${new Date().toISOString()}] ` + 'üì± Verificando depend√™ncias do frontend...');

    try {
      const packageJson = JSON.parse(fs.readFileSync('frontend/package.json', 'utf8'));

      const requiredDeps = {
        'react-native': '^0.72.0'
      };

      Object.entries(requiredDeps).forEach(([dep, minVersion]) => {
        const currentVersion = packageJson.dependencies?.[dep];

        if (!currentVersion) {
          this.errors.push(`‚ùå Depend√™ncia ausente: ${dep}`);
        } else if (!this.isVersionCompatible(currentVersion, minVersion)) {
          this.errors.push(`‚ùå Vers√£o incompat√≠vel de ${dep}: ${currentVersion} (m√≠nimo: ${minVersion})`);
        } else {
          this.success.push(`‚úÖ ${dep}: ${currentVersion} - Vers√£o compat√≠vel`);
        }
      });

      // Verificar TypeScript nas devDependencies
      const typescriptVersion = packageJson.devDependencies?.['typescript'];
      if (typescriptVersion) {
        this.success.push(`‚úÖ typescript: ${typescriptVersion} - Vers√£o compat√≠vel`);
      } else {
        this.warnings.push('‚ö†Ô∏è TypeScript n√£o encontrado nas devDependencies');
      }

      // Verificar depend√™ncias cr√≠ticas do React Native
      const criticalReactDeps = ['@types/react', '@types/react-native'];
      criticalReactDeps.forEach(dep => {
        if (!packageJson.devDependencies?.[dep]) {
          this.warnings.push(`‚ö†Ô∏è Depend√™ncia de tipos React ausente: ${dep}`);
        }
      });

      // Verificar depend√™ncias de navega√ß√£o
      if (!packageJson.dependencies?.['@react-navigation/native']) {
        this.warnings.push('‚ö†Ô∏è React Navigation n√£o configurado');
      }

    } catch (error) {
      this.errors.push('‚ùå Erro ao verificar depend√™ncias do frontend');
    }
  }

  // Verificar configura√ß√£o do TypeScript
  checkTypeScriptConfig() {
    console.log(`[${new Date().toISOString()}] ` + 'üìù Verificando configura√ß√£o do TypeScript...');

    try {
      // Verificar backend TypeScript
      if (fs.existsSync('backend/tsconfig.json')) {
        try {
          const backendConfig = JSON.parse(fs.readFileSync('backend/tsconfig.json', 'utf8'));
          
          // Verificar configura√ß√µes cr√≠ticas do backend
          if (backendConfig.compilerOptions?.strict === true) {
            this.success.push('‚úÖ Backend TypeScript: Strict mode ativado');
          } else {
            this.warnings.push('‚ö†Ô∏è Backend TypeScript: Strict mode n√£o ativado');
          }

          // Verificar outras configura√ß√µes importantes (apenas se strict n√£o estiver ativo)
          if (backendConfig.compilerOptions?.strict !== true) {
            const criticalSettings = {
              'noImplicitAny': true,
              'noImplicitReturns': true,
              'noImplicitThis': true
            };

            Object.entries(criticalSettings).forEach(([setting, value]) => {
              if (backendConfig.compilerOptions?.[setting] !== value) {
                this.warnings.push(`‚ö†Ô∏è Backend TypeScript: ${setting} n√£o configurado como ${value}`);
              }
            });
          }

        } catch (parseError) {
          console.error('Erro ao parsear backend tsconfig:', parseError.message);
          this.errors.push('‚ùå Backend TypeScript: Arquivo de configura√ß√£o inv√°lido');
        }
      } else {
        this.errors.push('‚ùå Backend TypeScript n√£o configurado');
      }

      // Verificar frontend TypeScript
      if (fs.existsSync('frontend/tsconfig.json')) {
        try {
          const frontendConfig = JSON.parse(fs.readFileSync('frontend/tsconfig.json', 'utf8'));
          
          // Frontend usa configura√ß√£o estendida do React Native
          if (frontendConfig.extends === '@react-native/typescript-config') {
            this.success.push('‚úÖ Frontend TypeScript: Configura√ß√£o React Native v√°lida');
          } else {
            this.warnings.push('‚ö†Ô∏è Frontend TypeScript: Configura√ß√£o n√£o estende React Native');
          }
        } catch (parseError) {
          this.warnings.push('‚ö†Ô∏è Frontend TypeScript: Arquivo de configura√ß√£o com problema');
        }
      } else {
        this.errors.push('‚ùå Frontend TypeScript n√£o configurado');
      }

      this.success.push('‚úÖ Configura√ß√µes TypeScript verificadas');

    } catch (error) {
      console.error('Erro detalhado:', error.message);
      this.errors.push('‚ùå Erro ao verificar configura√ß√£o do TypeScript');
    }
  }

  // Verificar ferramentas de qualidade
  checkQualityTools() {
    console.log(`[${new Date().toISOString()}] ` + 'üõ†Ô∏è Verificando ferramentas de qualidade...');

    const tools = [
      { name: 'ESLint', file: 'frontend/.eslintrc.js', required: true },
      { name: 'Prettier', file: 'frontend/.prettierrc.js', required: true },
      { name: 'Jest', file: 'frontend/jest.config.js', required: false },
      { name: 'Husky', file: '.husky', required: false }
    ];

    tools.forEach(tool => {
      if (fs.existsSync(tool.file) || fs.existsSync(tool.file.replace('.js', '.json'))) {
        this.success.push(`‚úÖ ${tool.name} configurado`);
      } else if (tool.required) {
        this.warnings.push(`‚ö†Ô∏è ${tool.name} n√£o configurado`);
      } else {
        this.warnings.push(`‚ö†Ô∏è ${tool.name} n√£o configurado (opcional)`);
      }
    });
  }

  // Verificar estrutura de arquivos
  checkFileStructure() {
    console.log(`[${new Date().toISOString()}] ` + 'üìÅ Verificando estrutura de arquivos...');

    const requiredFiles = [
      'backend/src/server.ts',
      'frontend/App.tsx',
      'frontend/src/screens/LoginScreen.tsx',
      'frontend/src/screens/DashboardScreen.tsx',
      'frontend/src/screens/TasksScreen.tsx',
      'docs/REGRAS_PROJETO_DOM_V2.md',
      'scripts/validate-rules.js'
    ];

    requiredFiles.forEach(file => {
      if (fs.existsSync(file)) {
        this.success.push(`‚úÖ ${file} encontrado`);
      } else {
        this.errors.push(`‚ùå ${file} n√£o encontrado`);
      }
    });

    // Verificar scripts cr√≠ticos
    const criticalScripts = [
      'backend/package.json',
      'frontend/package.json',
      'package.json'
    ];

    criticalScripts.forEach(script => {
      if (fs.existsSync(script)) {
        try {
          const packageJson = JSON.parse(fs.readFileSync(script, 'utf8'));
          const scripts = packageJson.scripts || {};
          const hasStartScript = scripts.start || scripts.dev || 
                                scripts['dev:backend'] || scripts['dev:frontend'] ||
                                Object.keys(scripts).some(key => key.includes('dev') || key.includes('start'));
          
          if (!hasStartScript) {
            this.warnings.push(`‚ö†Ô∏è Script de inicializa√ß√£o ausente em ${script}`);
          } else {
            this.success.push(`‚úÖ Scripts de inicializa√ß√£o configurados em ${script}`);
          }
        } catch (error) {
          this.warnings.push(`‚ö†Ô∏è ${script} com formato inv√°lido`);
        }
      } else {
        this.errors.push(`‚ùå ${script} n√£o encontrado`);
      }
    });
  }

  // Utilit√°rios
  isVersionCompatible(current, required) {
    // Implementa√ß√£o simples de compara√ß√£o de vers√µes
    const currentNum = current.replace(/[^\d.]/g, '');
    const requiredNum = required.replace(/[^\d.]/g, '');

    const currentParts = currentNum.split('.').map(Number);
    const requiredParts = requiredNum.split('.').map(Number);

    for (let i = 0; i < Math.max(currentParts.length, requiredParts.length); i++) {
      const currentPart = currentParts[i] || 0;
      const requiredPart = requiredParts[i] || 0;

      if (currentPart > requiredPart) return true;
      if (currentPart < requiredPart) return false;
    }

    return true;
  }

  // Executar todas as verifica√ß√µes
  runAllChecks() {
    console.log(`[${new Date().toISOString()}] ` + 'üöÄ Iniciando verifica√ß√£o de vers√µes DOM v2...\n');

    this.checkNodeVersion();
    this.checkNpmVersion();
    this.checkBackendDependencies();
    this.checkFrontendDependencies();
    this.checkTypeScriptConfig();
    this.checkQualityTools();
    this.checkFileStructure();

    this.printResults();
  }

  // Imprimir resultados
  printResults() {
    console.log(`[${new Date().toISOString()}] ` + '\nüìä RESULTADOS DA VERIFICA√á√ÉO:\n');

    if (this.success.length > 0) {
      console.log(`[${new Date().toISOString()}] ` + '‚úÖ SUCESSOS:');
      this.success.forEach(msg => console.log(`[${new Date().toISOString()}] ` + `  ${msg}`));
      console.log(`[${new Date().toISOString()}] ` + '');
    }

    if (this.warnings.length > 0) {
      console.log(`[${new Date().toISOString()}] ` + '‚ö†Ô∏è AVISOS:');
      this.warnings.forEach(msg => console.log(`[${new Date().toISOString()}] ` + `  ${msg}`));
      console.log(`[${new Date().toISOString()}] ` + '');
    }

    if (this.errors.length > 0) {
      console.log(`[${new Date().toISOString()}] ` + '‚ùå ERROS:');
      this.errors.forEach(msg => console.log(`[${new Date().toISOString()}] ` + `  ${msg}`));
      console.log(`[${new Date().toISOString()}] ` + '');
    }

    const total = this.success.length + this.warnings.length + this.errors.length;
    console.log(`[${new Date().toISOString()}] ` + `üìà TOTAL: ${total} verifica√ß√µes realizadas`);
    console.log(`[${new Date().toISOString()}] ` + `‚úÖ Sucessos: ${this.success.length}`);
    console.log(`[${new Date().toISOString()}] ` + `‚ö†Ô∏è Avisos: ${this.warnings.length}`);
    console.log(`[${new Date().toISOString()}] ` + `‚ùå Erros: ${this.errors.length}`);

    if (this.errors.length > 0) {
      console.log(`[${new Date().toISOString()}] ` + '\nüö® VERIFICA√á√ÉO FALHOU - Corrija os erros antes de continuar!');
      process.exit(1);
    } else if (this.warnings.length > 0) {
      console.log(`[${new Date().toISOString()}] ` + '\n‚ö†Ô∏è VERIFICA√á√ÉO COM AVISOS - Considere corrigir os avisos');
    } else {
      console.log(`[${new Date().toISOString()}] ` + '\nüéâ VERIFICA√á√ÉO APROVADA - Todas as vers√µes s√£o compat√≠veis!');
    }
  }
}

// Executar verifica√ß√£o
if (require.main === module) {
  const checker = new VersionChecker();
  checker.runAllChecks();
}

module.exports = VersionChecker;
