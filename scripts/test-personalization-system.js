/**
 * üß™ TESTE SISTEMA DE PERSONALIZA√á√ÉO - DOM v2
 * Script de teste para validar o sistema de personaliza√ß√£o avan√ßada
 * Implementa√ß√£o: Semana 21-22 da Fase 5
 */

const PersonalizationSystem = require('../personalization/personalization-system.js');

class PersonalizationSystemTester {
    constructor() {
        this.name = 'PersonalizationSystemTester';
        this.version = '1.0.0';
        this.testResults = [];
        this.startTime = Date.now();
    }

    /**
     * Executa todos os testes
     */
    async runAllTests() {
        console.log(`[${new Date().toISOString()}] üß™ INICIANDO TESTES DE PERSONALIZA√á√ÉO - DOM v2`);
        console.log(`[${new Date().toISOString()}] ================================================`);
        
        try {
            // Teste 1: Inicializa√ß√£o
            await this.testInitialization();
            
            // Teste 2: Cria√ß√£o de perfis
            await this.testProfileCreation();
            
            // Teste 3: Aplica√ß√£o de personaliza√ß√£o
            await this.testPersonalizationApplication();
            
            // Teste 4: Regras de personaliza√ß√£o
            await this.testPersonalizationRules();
            
            // Teste 5: Performance
            await this.testPerformance();
            
            // Teste 6: Integra√ß√£o
            await this.testIntegration();
            
            // Teste 7: Relat√≥rios
            await this.testReports();
            
            // Gera relat√≥rio final
            this.generateFinalReport();
            
        } catch (error) {
            console.error(`[${new Date().toISOString()}] ‚ùå Erro nos testes:`, error);
            this.addTestResult('ERROR', 'Erro geral nos testes', false, error.message);
        }
    }

    /**
     * Teste 1: Inicializa√ß√£o do sistema
     */
    async testInitialization() {
        console.log(`[${new Date().toISOString()}] üîß Teste 1: Inicializa√ß√£o do sistema...`);
        
        try {
            const system = new PersonalizationSystem();
            
            // Testa cria√ß√£o do objeto
            this.addTestResult('INIT', 'Cria√ß√£o do objeto PersonalizationSystem', true);
            
            // Testa inicializa√ß√£o
            const initResult = await system.initialize();
            this.addTestResult('INIT', 'Inicializa√ß√£o do sistema', initResult.success, initResult.error);
            
            // Testa componentes
            const components = [
                { name: 'UserProfiles', component: system.userProfiles },
                { name: 'PersonalizationRules', component: system.personalizationRules }
            ];
            
            components.forEach(({ name, component }) => {
                const isValid = component && typeof component === 'object' && component.name;
                this.addTestResult('INIT', `Componente ${name}`, isValid);
            });
            
            console.log(`[${new Date().toISOString()}] ‚úÖ Teste 1 conclu√≠do`);
            
        } catch (error) {
            this.addTestResult('INIT', 'Inicializa√ß√£o', false, error.message);
            throw error;
        }
    }

    /**
     * Teste 2: Cria√ß√£o de perfis
     */
    async testProfileCreation() {
        console.log(`[${new Date().toISOString()}] üë§ Teste 2: Cria√ß√£o de perfis...`);
        
        try {
            const system = new PersonalizationSystem();
            await system.initialize();
            
            // Testa cria√ß√£o de diferentes tipos de perfil
            const profileTypes = ['admin', 'manager', 'employee', 'family'];
            
            for (const profileType of profileTypes) {
                const userId = `test_${profileType}_${Date.now()}`;
                const result = system.userProfiles.createProfile(userId, profileType);
                
                this.addTestResult('PROFILES', `Cria√ß√£o de perfil ${profileType}`, result.success, result.error);
                
                if (result.success) {
                    // Valida perfil criado
                    const profile = system.userProfiles.getProfile(userId);
                    this.addTestResult('PROFILES', `Valida√ß√£o de perfil ${profileType}`, !!profile);
                    
                    // Valida configura√ß√µes de interface
                    const interfaceSettings = system.userProfiles.getInterfaceSettings(userId);
                    this.addTestResult('PROFILES', `Configura√ß√µes de interface ${profileType}`, !!interfaceSettings);
                    
                    // Valida configura√ß√µes de produtividade
                    const productivitySettings = system.userProfiles.getProductivitySettings(userId);
                    this.addTestResult('PROFILES', `Configura√ß√µes de produtividade ${profileType}`, !!productivitySettings);
                }
            }
            
            // Testa listagem de perfis
            const profilesList = system.userProfiles.listProfiles();
            this.addTestResult('PROFILES', 'Listagem de perfis', profilesList.total > 0);
            
            console.log(`[${new Date().toISOString()}] ‚úÖ Teste 2 conclu√≠do`);
            
        } catch (error) {
            this.addTestResult('PROFILES', 'Cria√ß√£o de perfis', false, error.message);
            throw error;
        }
    }

    /**
     * Teste 3: Aplica√ß√£o de personaliza√ß√£o
     */
    async testPersonalizationApplication() {
        console.log(`[${new Date().toISOString()}] üé® Teste 3: Aplica√ß√£o de personaliza√ß√£o...`);
        
        try {
            const system = new PersonalizationSystem();
            await system.initialize();
            
            // Cria perfil de teste
            const userId = `test_personalization_${Date.now()}`;
            system.userProfiles.createProfile(userId, 'manager');
            
            // Testa aplica√ß√£o de personaliza√ß√£o
            const result = await system.applyPersonalization(userId);
            
            this.addTestResult('PERSONALIZATION', 'Aplica√ß√£o de personaliza√ß√£o', result.success, result.error);
            
            if (result.success) {
                // Valida estrutura da personaliza√ß√£o
                const hasPersonalization = result.personalization;
                this.addTestResult('PERSONALIZATION', 'Estrutura de personaliza√ß√£o', hasPersonalization);
                
                const hasInterface = result.personalization.interface;
                this.addTestResult('PERSONALIZATION', 'Configura√ß√µes de interface', hasInterface);
                
                const hasProductivity = result.personalization.productivity;
                this.addTestResult('PERSONALIZATION', 'Configura√ß√µes de produtividade', hasProductivity);
                
                const hasProfile = result.personalization.profile;
                this.addTestResult('PERSONALIZATION', 'Informa√ß√µes de perfil', hasProfile);
                
                // Valida regras aplicadas
                const appliedRules = result.appliedRules;
                this.addTestResult('PERSONALIZATION', 'Regras aplicadas', Array.isArray(appliedRules));
                
                // Valida recomenda√ß√µes
                const recommendations = result.recommendations;
                this.addTestResult('PERSONALIZATION', 'Recomenda√ß√µes geradas', Array.isArray(recommendations));
            }
            
            console.log(`[${new Date().toISOString()}] ‚úÖ Teste 3 conclu√≠do`);
            
        } catch (error) {
            this.addTestResult('PERSONALIZATION', 'Aplica√ß√£o de personaliza√ß√£o', false, error.message);
            throw error;
        }
    }

    /**
     * Teste 4: Regras de personaliza√ß√£o
     */
    async testPersonalizationRules() {
        console.log(`[${new Date().toISOString()}] ‚öôÔ∏è Teste 4: Regras de personaliza√ß√£o...`);
        
        try {
            const system = new PersonalizationSystem();
            await system.initialize();
            
            const userId = `test_rules_${Date.now()}`;
            system.userProfiles.createProfile(userId, 'admin');
            
            // Testa avalia√ß√£o de regras
            const rulesResult = system.personalizationRules.evaluateRules(userId, {
                profile: { type: 'admin' },
                time: { hour: 10, day: 1 },
                device: { type: 'desktop' }
            });
            
            this.addTestResult('RULES', 'Avalia√ß√£o de regras', rulesResult.success, rulesResult.error);
            
            if (rulesResult.success) {
                // Valida regras aplicadas
                const appliedRules = rulesResult.appliedRules;
                this.addTestResult('RULES', 'Regras aplicadas', Array.isArray(appliedRules));
                
                // Valida mudan√ßas
                const changes = rulesResult.changes;
                this.addTestResult('RULES', 'Mudan√ßas registradas', Array.isArray(changes));
            }
            
            // Testa cria√ß√£o de regra personalizada
            const customRule = {
                category: 'productivity',
                name: 'Teste Personalizado',
                description: 'Regra de teste para valida√ß√£o',
                condition: (context) => context.profile.type === 'admin',
                action: (profile) => ({ ...profile, testField: true }),
                priority: 50
            };
            
            const createRuleResult = system.personalizationRules.createCustomRule(userId, customRule);
            this.addTestResult('RULES', 'Cria√ß√£o de regra personalizada', createRuleResult.success, createRuleResult.error);
            
            // Testa listagem de regras personalizadas
            const customRules = system.personalizationRules.listCustomRules(userId);
            this.addTestResult('RULES', 'Listagem de regras personalizadas', customRules.total >= 0);
            
            console.log(`[${new Date().toISOString()}] ‚úÖ Teste 4 conclu√≠do`);
            
        } catch (error) {
            this.addTestResult('RULES', 'Regras de personaliza√ß√£o', false, error.message);
            throw error;
        }
    }

    /**
     * Teste 5: Performance
     */
    async testPerformance() {
        console.log(`[${new Date().toISOString()}] ‚ö° Teste 5: Performance...`);
        
        try {
            const system = new PersonalizationSystem();
            await system.initialize();
            
            // Testa tempo de aplica√ß√£o de personaliza√ß√£o
            const startTime = Date.now();
            const result = await system.applyPersonalization('test_performance');
            const executionTime = Date.now() - startTime;
            
            const isFast = executionTime < 1000; // M√°ximo 1 segundo
            this.addTestResult('PERFORMANCE', `Tempo de aplica√ß√£o (${executionTime}ms)`, isFast);
            
            // Testa m√∫ltiplas aplica√ß√µes
            const times = [];
            for (let i = 0; i < 3; i++) {
                const start = Date.now();
                await system.applyPersonalization(`test_perf_${i}`);
                times.push(Date.now() - start);
            }
            
            const avgTime = times.reduce((sum, time) => sum + time, 0) / times.length;
            const isConsistent = times.every(time => Math.abs(time - avgTime) < 500); // Varia√ß√£o < 500ms
            this.addTestResult('PERFORMANCE', 'Consist√™ncia de performance', isConsistent);
            
            // Testa uso de mem√≥ria
            const memoryUsage = process.memoryUsage();
            const isMemoryEfficient = memoryUsage.heapUsed < 200 * 1024 * 1024; // M√°ximo 200MB
            this.addTestResult('PERFORMANCE', 'Uso de mem√≥ria eficiente', isMemoryEfficient);
            
            console.log(`[${new Date().toISOString()}] ‚úÖ Teste 5 conclu√≠do`);
            
        } catch (error) {
            this.addTestResult('PERFORMANCE', 'Performance', false, error.message);
            throw error;
        }
    }

    /**
     * Teste 6: Integra√ß√£o
     */
    async testIntegration() {
        console.log(`[${new Date().toISOString()}] üîó Teste 6: Integra√ß√£o...`);
        
        try {
            const system = new PersonalizationSystem();
            await system.initialize();
            
            // Testa integra√ß√£o entre componentes
            const profilesReport = system.userProfiles.getProfilesReport();
            this.addTestResult('INTEGRATION', 'Relat√≥rio de perfis', !!profilesReport);
            
            const rulesReport = system.personalizationRules.getRulesReport();
            this.addTestResult('INTEGRATION', 'Relat√≥rio de regras', !!rulesReport);
            
            const systemReport = system.getSystemReport();
            this.addTestResult('INTEGRATION', 'Relat√≥rio do sistema', !!systemReport);
            
            // Testa valida√ß√£o de personaliza√ß√£o
            const userId = `test_integration_${Date.now()}`;
            system.userProfiles.createProfile(userId, 'employee');
            await system.applyPersonalization(userId);
            
            const validation = system.validatePersonalization(userId);
            this.addTestResult('INTEGRATION', 'Valida√ß√£o de personaliza√ß√£o', validation.valid);
            
            // Testa dados do dashboard
            const dashboardData = system.getDashboardData();
            this.addTestResult('INTEGRATION', 'Dados do dashboard', !!dashboardData);
            
            console.log(`[${new Date().toISOString()}] ‚úÖ Teste 6 conclu√≠do`);
            
        } catch (error) {
            this.addTestResult('INTEGRATION', 'Integra√ß√£o', false, error.message);
            throw error;
        }
    }

    /**
     * Teste 7: Relat√≥rios
     */
    async testReports() {
        console.log(`[${new Date().toISOString()}] üìã Teste 7: Relat√≥rios...`);
        
        try {
            const system = new PersonalizationSystem();
            await system.initialize();
            
            // Testa relat√≥rio do sistema
            const systemReport = system.getSystemReport();
            this.addTestResult('REPORTS', 'Relat√≥rio do sistema', !!systemReport);
            
            if (systemReport) {
                const hasSystem = systemReport.system;
                this.addTestResult('REPORTS', 'Se√ß√£o do sistema', hasSystem);
                
                const hasComponents = systemReport.components;
                this.addTestResult('REPORTS', 'Se√ß√£o de componentes', hasComponents);
                
                const hasMetrics = systemReport.metrics;
                this.addTestResult('REPORTS', 'Se√ß√£o de m√©tricas', hasMetrics);
                
                const hasHistory = systemReport.history;
                this.addTestResult('REPORTS', 'Se√ß√£o de hist√≥rico', hasHistory);
            }
            
            // Testa dados do dashboard
            const dashboardData = system.getDashboardData();
            this.addTestResult('REPORTS', 'Dados do dashboard', !!dashboardData);
            
            if (dashboardData) {
                const hasProfiles = dashboardData.profiles;
                this.addTestResult('REPORTS', 'Dados de perfis', hasProfiles);
                
                const hasPersonalizations = dashboardData.personalizations;
                this.addTestResult('REPORTS', 'Dados de personaliza√ß√µes', hasPersonalizations);
                
                const hasMetrics = dashboardData.metrics;
                this.addTestResult('REPORTS', 'M√©tricas do dashboard', hasMetrics);
                
                const hasRecommendations = dashboardData.recommendations;
                this.addTestResult('REPORTS', 'Recomenda√ß√µes do dashboard', Array.isArray(hasRecommendations));
            }
            
            console.log(`[${new Date().toISOString()}] ‚úÖ Teste 7 conclu√≠do`);
            
        } catch (error) {
            this.addTestResult('REPORTS', 'Relat√≥rios', false, error.message);
            throw error;
        }
    }

    /**
     * Adiciona resultado de teste
     */
    addTestResult(category, description, passed, error = null) {
        const result = {
            category,
            description,
            passed,
            error,
            timestamp: new Date().toISOString()
        };
        
        this.testResults.push(result);
        
        const status = passed ? '‚úÖ' : '‚ùå';
        console.log(`[${new Date().toISOString()}] ${status} ${category}: ${description}`);
        
        if (error) {
            console.log(`[${new Date().toISOString()}]    Erro: ${error}`);
        }
    }

    /**
     * Gera relat√≥rio final
     */
    generateFinalReport() {
        const totalTests = this.testResults.length;
        const passedTests = this.testResults.filter(r => r.passed).length;
        const failedTests = totalTests - passedTests;
        const successRate = totalTests > 0 ? (passedTests / totalTests) * 100 : 0;
        const executionTime = Date.now() - this.startTime;
        
        console.log(`\n[${new Date().toISOString()}] üìä RELAT√ìRIO FINAL DOS TESTES`);
        console.log(`[${new Date().toISOString()}] =================================`);
        console.log(`[${new Date().toISOString()}] üìà Total de testes: ${totalTests}`);
        console.log(`[${new Date().toISOString()}] ‚úÖ Testes aprovados: ${passedTests}`);
        console.log(`[${new Date().toISOString()}] ‚ùå Testes falharam: ${failedTests}`);
        console.log(`[${new Date().toISOString()}] üìä Taxa de sucesso: ${successRate.toFixed(1)}%`);
        console.log(`[${new Date().toISOString()}] ‚è±Ô∏è  Tempo total: ${executionTime}ms`);
        
        // Agrupa por categoria
        const categories = {};
        this.testResults.forEach(result => {
            if (!categories[result.category]) {
                categories[result.category] = { passed: 0, failed: 0, total: 0 };
            }
            categories[result.category].total++;
            if (result.passed) {
                categories[result.category].passed++;
            } else {
                categories[result.category].failed++;
            }
        });
        
        console.log(`\n[${new Date().toISOString()}] üìã RESULTADOS POR CATEGORIA:`);
        Object.keys(categories).forEach(category => {
            const cat = categories[category];
            const catSuccessRate = (cat.passed / cat.total) * 100;
            console.log(`[${new Date().toISOString()}] ${category}: ${cat.passed}/${cat.total} (${catSuccessRate.toFixed(1)}%)`);
        });
        
        // Testes que falharam
        const failedResults = this.testResults.filter(r => !r.passed);
        if (failedResults.length > 0) {
            console.log(`\n[${new Date().toISOString()}] ‚ùå TESTES QUE FALHARAM:`);
            failedResults.forEach(result => {
                console.log(`[${new Date().toISOString()}] - ${result.category}: ${result.description}`);
                if (result.error) {
                    console.log(`[${new Date().toISOString()}]   Erro: ${result.error}`);
                }
            });
        }
        
        // Conclus√£o
        console.log(`\n[${new Date().toISOString()}] üéØ CONCLUS√ÉO:`);
        if (successRate >= 90) {
            console.log(`[${new Date().toISOString()}] üéâ EXCELENTE! Sistema de personaliza√ß√£o funcionando perfeitamente`);
        } else if (successRate >= 80) {
            console.log(`[${new Date().toISOString()}] ‚úÖ BOM! Sistema funcionando com pequenos ajustes necess√°rios`);
        } else if (successRate >= 70) {
            console.log(`[${new Date().toISOString()}] üü° REGULAR! Sistema funcionando mas precisa de melhorias`);
        } else {
            console.log(`[${new Date().toISOString()}] ‚ùå PROBLEMAS! Sistema precisa de corre√ß√µes significativas`);
        }
        
        return {
            totalTests,
            passedTests,
            failedTests,
            successRate,
            executionTime,
            categories,
            failedResults
        };
    }
}

// Fun√ß√£o principal
async function main() {
    console.log(`[${new Date().toISOString()}] üöÄ INICIANDO TESTES DE PERSONALIZA√á√ÉO - DOM v2`);
    console.log(`[${new Date().toISOString()}] ================================================`);
    
    const tester = new PersonalizationSystemTester();
    
    try {
        await tester.runAllTests();
        
        const report = tester.generateFinalReport();
        
        // Retorna c√≥digo de sa√≠da baseado no sucesso
        if (report.successRate >= 80) {
            console.log(`[${new Date().toISOString()}] üéâ Testes conclu√≠dos com sucesso!`);
            process.exit(0);
        } else {
            console.log(`[${new Date().toISOString()}] ‚ö†Ô∏è Testes conclu√≠dos com problemas`);
            process.exit(1);
        }
        
    } catch (error) {
        console.error(`[${new Date().toISOString()}] ‚ùå Erro fatal nos testes:`, error);
        process.exit(1);
    }
}

// Exporta para uso em outros m√≥dulos
if (typeof module !== 'undefined' && module.exports) {
    module.exports = PersonalizationSystemTester;
    module.exports.main = main;
}

// Executa se for o arquivo principal
if (require.main === module) {
    main();
} 