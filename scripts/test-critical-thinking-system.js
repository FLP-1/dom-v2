const CriticalThinkingEnforcement = require('./validate-critical-thinking-enforcement');

/**
 * üß™ TESTE DO SISTEMA DE GARANTIA DAS DIRETIVAS DE PENSAMENTO CR√çTICO
 * 
 * Este script testa todas as funcionalidades do sistema de valida√ß√£o
 * para garantir que as diretivas sejam respeitadas corretamente.
 */

console.log('üß™ INICIANDO TESTES DO SISTEMA DE PENSAMENTO CR√çTICO');
console.log('==================================================');

const enforcement = new CriticalThinkingEnforcement();

// Teste 1: Valida√ß√£o bem-sucedida
console.log('\nüìã TESTE 1: Valida√ß√£o bem-sucedida');
try {
  const validAction = {
    type: 'DECISION',
    description: 'Implementar sistema de valida√ß√£o',
    source: { verified: true, url: 'https://docs.example.com/validation' },
    assumptions: { identified: true, questioned: true, validated: true },
    logic: { tested: true, validated: true, consistent: true },
    alternatives: { considered: true, perspectives: true, creative: true },
    transparent: { documented: true, justified: true, clear: true },
    honest: { declared: true, errors: false, uncertainty: false }
  };

  const result = enforcement.validateBeforeAction(validAction);
  console.log('‚úÖ Teste 1 PASSOU: Valida√ß√£o bem-sucedida');
} catch (error) {
  console.log('‚ùå Teste 1 FALHOU:', error.message);
}

// Teste 2: Viola√ß√£o de fonte n√£o verificada
console.log('\nüìã TESTE 2: Viola√ß√£o de fonte n√£o verificada');
try {
  const invalidAction = {
    type: 'DECISION',
    description: 'Implementar sem fonte verificada',
    source: { verified: false, url: null },
    assumptions: { identified: true, questioned: true, validated: true },
    logic: { tested: true, validated: true, consistent: true },
    alternatives: { considered: true, perspectives: true, creative: true },
    transparent: { documented: true, justified: true, clear: true },
    honest: { declared: true, errors: false, uncertainty: false }
  };

  enforcement.validateBeforeAction(invalidAction);
  console.log('‚ùå Teste 2 FALHOU: Deveria ter gerado erro');
} catch (error) {
  console.log('‚úÖ Teste 2 PASSOU: Viola√ß√£o detectada corretamente');
  console.log('   Erro:', error.message.split('\n')[0]);
}

// Teste 3: Viola√ß√£o de suposi√ß√µes n√£o questionadas
console.log('\nüìã TESTE 3: Viola√ß√£o de suposi√ß√µes n√£o questionadas');
try {
  const invalidAction = {
    type: 'DECISION',
    description: 'Implementar sem questionar suposi√ß√µes',
    source: { verified: true, url: 'https://docs.example.com' },
    assumptions: { identified: false, questioned: false, validated: false },
    logic: { tested: true, validated: true, consistent: true },
    alternatives: { considered: true, perspectives: true, creative: true },
    transparent: { documented: true, justified: true, clear: true },
    honest: { declared: true, errors: false, uncertainty: false }
  };

  enforcement.validateBeforeAction(invalidAction);
  console.log('‚ùå Teste 3 FALHOU: Deveria ter gerado erro');
} catch (error) {
  console.log('‚úÖ Teste 3 PASSOU: Viola√ß√£o detectada corretamente');
  console.log('   Erro:', error.message.split('\n')[0]);
}

// Teste 4: Viola√ß√£o de l√≥gica n√£o testada
console.log('\nüìã TESTE 4: Viola√ß√£o de l√≥gica n√£o testada');
try {
  const invalidAction = {
    type: 'DECISION',
    description: 'Implementar sem testar l√≥gica',
    source: { verified: true, url: 'https://docs.example.com' },
    assumptions: { identified: true, questioned: true, validated: true },
    logic: { tested: false, validated: false, consistent: false },
    alternatives: { considered: true, perspectives: true, creative: true },
    transparent: { documented: true, justified: true, clear: true },
    honest: { declared: true, errors: false, uncertainty: false }
  };

  enforcement.validateBeforeAction(invalidAction);
  console.log('‚ùå Teste 4 FALHOU: Deveria ter gerado erro');
} catch (error) {
  console.log('‚úÖ Teste 4 PASSOU: Viola√ß√£o detectada corretamente');
  console.log('   Erro:', error.message.split('\n')[0]);
}

// Teste 5: Viola√ß√£o de alternativas n√£o consideradas
console.log('\nüìã TESTE 5: Viola√ß√£o de alternativas n√£o consideradas');
try {
  const invalidAction = {
    type: 'DECISION',
    description: 'Implementar sem considerar alternativas',
    source: { verified: true, url: 'https://docs.example.com' },
    assumptions: { identified: true, questioned: true, validated: true },
    logic: { tested: true, validated: true, consistent: true },
    alternatives: { considered: false, perspectives: false, creative: false },
    transparent: { documented: true, justified: true, clear: true },
    honest: { declared: true, errors: false, uncertainty: false }
  };

  enforcement.validateBeforeAction(invalidAction);
  console.log('‚ùå Teste 5 FALHOU: Deveria ter gerado erro');
} catch (error) {
  console.log('‚úÖ Teste 5 PASSOU: Viola√ß√£o detectada corretamente');
  console.log('   Erro:', error.message.split('\n')[0]);
}

// Teste 6: Viola√ß√£o de transpar√™ncia
console.log('\nüìã TESTE 6: Viola√ß√£o de transpar√™ncia');
try {
  const invalidAction = {
    type: 'DECISION',
    description: 'Implementar sem transpar√™ncia',
    source: { verified: true, url: 'https://docs.example.com' },
    assumptions: { identified: true, questioned: true, validated: true },
    logic: { tested: true, validated: true, consistent: true },
    alternatives: { considered: true, perspectives: true, creative: true },
    transparent: { documented: false, justified: false, clear: false },
    honest: { declared: true, errors: false, uncertainty: false }
  };

  enforcement.validateBeforeAction(invalidAction);
  console.log('‚ùå Teste 6 FALHOU: Deveria ter gerado erro');
} catch (error) {
  console.log('‚úÖ Teste 6 PASSOU: Viola√ß√£o detectada corretamente');
  console.log('   Erro:', error.message.split('\n')[0]);
}

// Teste 7: Viola√ß√£o de honestidade
console.log('\nüìã TESTE 7: Viola√ß√£o de honestidade');
try {
  const invalidAction = {
    type: 'DECISION',
    description: 'Implementar sem honestidade',
    source: { verified: true, url: 'https://docs.example.com' },
    assumptions: { identified: true, questioned: true, validated: true },
    logic: { tested: true, validated: true, consistent: true },
    alternatives: { considered: true, perspectives: true, creative: true },
    transparent: { documented: true, justified: true, clear: true },
    honest: { declared: false, errors: false, uncertainty: false }
  };

  enforcement.validateBeforeAction(invalidAction);
  console.log('‚ùå Teste 7 FALHOU: Deveria ter gerado erro');
} catch (error) {
  console.log('‚úÖ Teste 7 PASSOU: Viola√ß√£o detectada corretamente');
  console.log('   Erro:', error.message.split('\n')[0]);
}

// Teste 8: Valida√ß√£o simples
console.log('\nüìã TESTE 8: Valida√ß√£o simples');
try {
  const result = enforcement.validateSimpleAction(
    'DECISION',
    'Implementar valida√ß√£o simples',
    'https://docs.example.com/simple'
  );
  console.log('‚úÖ Teste 8 PASSOU: Valida√ß√£o simples funcionou');
} catch (error) {
  console.log('‚ùå Teste 8 FALHOU:', error.message);
}

// Teste 9: M√∫ltiplas viola√ß√µes
console.log('\nüìã TESTE 9: M√∫ltiplas viola√ß√µes');
try {
  const invalidAction = {
    type: 'DECISION',
    description: 'Implementar com m√∫ltiplas viola√ß√µes',
    source: { verified: false, url: null },
    assumptions: { identified: false, questioned: false, validated: false },
    logic: { tested: false, validated: false, consistent: false },
    alternatives: { considered: false, perspectives: false, creative: false },
    transparent: { documented: false, justified: false, clear: false },
    honest: { declared: false, errors: false, uncertainty: false }
  };

  enforcement.validateBeforeAction(invalidAction);
  console.log('‚ùå Teste 9 FALHOU: Deveria ter gerado erro');
} catch (error) {
  console.log('‚úÖ Teste 9 PASSOU: M√∫ltiplas viola√ß√µes detectadas');
  console.log('   Erro:', error.message.split('\n')[0]);
}

// Teste 10: Gera√ß√£o de relat√≥rio
console.log('\nüìã TESTE 10: Gera√ß√£o de relat√≥rio');
try {
  const report = enforcement.generateReport();
  console.log('‚úÖ Teste 10 PASSOU: Relat√≥rio gerado com sucesso');
  console.log('   Resumo:', report.summary);
  console.log('   Recomenda√ß√µes:', report.recommendations.length);
} catch (error) {
  console.log('‚ùå Teste 10 FALHOU:', error.message);
}

// Teste 11: Verifica√ß√£o de arquivos de log
console.log('\nüìã TESTE 11: Verifica√ß√£o de arquivos de log');
const fs = require('fs');
const path = require('path');

const logsDir = path.join(__dirname, '../logs');
const violationsFile = path.join(logsDir, 'critical-thinking-violations.json');
const validationsFile = path.join(logsDir, 'critical-thinking-validations.json');
const alertsFile = path.join(logsDir, 'critical-alerts.json');

const filesExist = [
  fs.existsSync(violationsFile),
  fs.existsSync(validationsFile),
  fs.existsSync(alertsFile)
];

if (filesExist.every(exists => exists)) {
  console.log('‚úÖ Teste 11 PASSOU: Todos os arquivos de log foram criados');
  
  // Verificar conte√∫do
  try {
    const violations = JSON.parse(fs.readFileSync(violationsFile, 'utf8'));
    const validations = JSON.parse(fs.readFileSync(validationsFile, 'utf8'));
    const alerts = JSON.parse(fs.readFileSync(alertsFile, 'utf8'));
    
    console.log(`   Viola√ß√µes: ${violations.length}`);
    console.log(`   Valida√ß√µes: ${validations.length}`);
    console.log(`   Alertas: ${alerts.length}`);
  } catch (error) {
    console.log('‚ö†Ô∏è  Aviso: Erro ao ler arquivos de log:', error.message);
  }
} else {
  console.log('‚ùå Teste 11 FALHOU: Alguns arquivos de log n√£o foram criados');
  console.log('   Viola√ß√µes:', filesExist[0]);
  console.log('   Valida√ß√µes:', filesExist[1]);
  console.log('   Alertas:', filesExist[2]);
}

// Resumo final
console.log('\nüìä RESUMO DOS TESTES');
console.log('====================');

const report = enforcement.generateReport();
console.log(`Total de a√ß√µes testadas: ${report.summary.totalActions}`);
console.log(`Viola√ß√µes detectadas: ${report.summary.violations}`);
console.log(`Valida√ß√µes bem-sucedidas: ${report.summary.validations}`);
console.log(`Taxa de conformidade: ${report.summary.complianceRate}`);

if (report.recommendations.length > 0) {
  console.log('\nüîß RECOMENDA√á√ïES:');
  report.recommendations.forEach((rec, index) => {
    console.log(`   ${index + 1}. ${rec}`);
  });
}

console.log('\nüéØ RESULTADO FINAL:');
if (report.summary.violations === 0) {
  console.log('‚úÖ SISTEMA FUNCIONANDO PERFEITAMENTE - TODAS AS VIOLA√á√ïES FORAM DETECTADAS');
} else {
  console.log('‚ö†Ô∏è  SISTEMA FUNCIONANDO - ALGUMAS VIOLA√á√ïES FORAM DETECTADAS (ESPERADO NOS TESTES)');
}

console.log('\nüß™ TESTES CONCLU√çDOS COM SUCESSO!');
console.log('=================================='); 