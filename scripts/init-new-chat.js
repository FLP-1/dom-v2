#!/usr/bin/env node

/**
 * üöÄ SCRIPT DE INICIALIZA√á√ÉO PARA NOVOS CHATS - DOM v2
 * 
 * Este script garante que novos chats tenham:
 * ‚úÖ Contexto imediato carregado
 * ‚úÖ Estado atual validado
 * ‚úÖ Pr√≥ximos passos definidos
 * ‚úÖ Ambiente preparado
 * 
 * Data: 22/07/2025
 * Respons√°vel: IA Assistant
 */

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

// Cores para output
const colors = {
  reset: '\x1b[0m',
  bright: '\x1b[1m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m'
};

function log(message, color = 'reset') {
  console.log(`${colors[color]}${message}${colors.reset}`);
}

function logHeader(message) {
  log('\n' + '='.repeat(60), 'cyan');
  log(`üöÄ ${message}`, 'bright');
  log('='.repeat(60), 'cyan');
}

function logStep(step, status = 'info') {
  const statusIcon = {
    info: '‚ÑπÔ∏è',
    success: '‚úÖ',
    warning: '‚ö†Ô∏è',
    error: '‚ùå'
  };
  
  const statusColor = {
    info: 'blue',
    success: 'green',
    warning: 'yellow',
    error: 'red'
  };
  
  log(`${statusIcon[status]} ${step}`, statusColor[status]);
}

function checkFileExists(filePath) {
  return fs.existsSync(path.join(process.cwd(), filePath));
}

function readFileContent(filePath) {
  try {
    return fs.readFileSync(path.join(process.cwd(), filePath), 'utf8');
  } catch (error) {
    return null;
  }
}

function executeCommand(command, cwd = process.cwd()) {
  try {
    return execSync(command, { 
      cwd, 
      encoding: 'utf8',
      stdio: 'pipe'
    });
  } catch (error) {
    return null;
  }
}

function validateProjectStructure() {
  logHeader('VALIDA√á√ÉO DA ESTRUTURA DO PROJETO');
  
  const requiredFiles = [
    'contexto-rapido-novo-chat.md',
    'docs/continuidade-desenvolvimento-hibrido.md',
    'docs/especificacoes-funcionalidades-detalhadas.md',
    'docs/instrucoes-implementacao-praticas.md',
    'docs/diretivas-pensamento-critico.md',
    'frontend/package.json',
    'backend/package.json',
    'package.json'
  ];
  
  let allFilesExist = true;
  
  requiredFiles.forEach(file => {
    if (checkFileExists(file)) {
      logStep(`${file} - Encontrado`, 'success');
    } else {
      logStep(`${file} - N√ÉO ENCONTRADO`, 'error');
      allFilesExist = false;
    }
  });
  
  return allFilesExist;
}

function loadContextFiles() {
  logHeader('CARREGAMENTO DE ARQUIVOS DE CONTEXTO');
  
  const contextFiles = {
    'contexto-rapido-novo-chat.md': 'Contexto R√°pido',
    'docs/continuidade-desenvolvimento-hibrido.md': 'Plano Detalhado',
    'docs/especificacoes-funcionalidades-detalhadas.md': 'Especifica√ß√µes T√©cnicas',
    'docs/instrucoes-implementacao-praticas.md': 'Instru√ß√µes Pr√°ticas',
    'docs/diretivas-pensamento-critico.md': 'Diretivas de Pensamento Cr√≠tico'
  };
  
  const loadedContext = {};
  
  Object.entries(contextFiles).forEach(([file, description]) => {
    const content = readFileContent(file);
    if (content) {
      loadedContext[file] = {
        description,
        content: content.substring(0, 500) + '...',
        fullContent: content
      };
      logStep(`${description} - Carregado`, 'success');
    } else {
      logStep(`${description} - ERRO AO CARREGAR`, 'error');
    }
  });
  
  return loadedContext;
}

function validateCurrentState() {
  logHeader('VALIDA√á√ÉO DO ESTADO ATUAL');
  
  // ESLint n√£o configurado intencionalmente (foco em funcionalidades)
  logStep('ESLint - N√ÉO CONFIGURADO (intencionalmente)', 'info');
  log('   üìù Motivo: Foco em funcionalidades cr√≠ticas primeiro', 'blue');
  
  // Verificar testes no backend
  logStep('Verificando testes no backend...', 'info');
  const backendTestResult = executeCommand('npm test', path.join(process.cwd(), 'backend'));
  
  if (backendTestResult === null) {
    logStep('Testes backend - N√ÉO CONFIGURADOS (problema confirmado)', 'warning');
  } else {
    logStep('Testes backend - FUNCIONANDO', 'success');
  }
  
  // Verificar TypeScript
  logStep('Verificando TypeScript...', 'info');
  const frontendTsResult = executeCommand('npx tsc --noEmit', path.join(process.cwd(), 'frontend'));
  const backendTsResult = executeCommand('npx tsc --noEmit', path.join(process.cwd(), 'backend'));
  
  if (frontendTsResult === null) {
    logStep('TypeScript frontend - PROBLEMAS DETECTADOS', 'warning');
  } else {
    logStep('TypeScript frontend - OK', 'success');
  }
  
  if (backendTsResult === null) {
    logStep('TypeScript backend - PROBLEMAS DETECTADOS', 'warning');
  } else {
    logStep('TypeScript backend - OK', 'success');
  }
}

function generateNextSteps() {
  logHeader('PR√ìXIMOS PASSOS DEFINIDOS');
  
  const nextSteps = [
    {
      priority: 'BAIXA',
      task: 'Configurar ESLint (opcional)',
      reason: 'Pode ser implementado depois que funcionalidades cr√≠ticas estiverem prontas',
      estimatedTime: '2-3 horas'
    },
    {
      priority: 'CR√çTICA',
      task: 'Configurar testes b√°sicos (Jest)',
      reason: 'Ausentes no backend, b√°sicos no frontend',
      estimatedTime: '3-4 horas'
    },
    {
      priority: 'CR√çTICA',
      task: 'Padronizar TypeScript',
      reason: 'Configura√ß√£o inconsistente entre projetos',
      estimatedTime: '1-2 horas'
    },
    {
      priority: 'IMPORTANTE',
      task: 'Implementar pre-commit hooks',
      reason: 'Preven√ß√£o de problemas futuros',
      estimatedTime: '1 hora'
    },
    {
      priority: 'INOVA√á√ÉO',
      task: 'Criar estrutura para micro-frontends',
      reason: 'Experimento da Semana 1 - Module Federation',
      estimatedTime: '4-6 horas'
    }
  ];
  
  nextSteps.forEach((step, index) => {
    logStep(`${index + 1}. [${step.priority}] ${step.task}`, 'info');
    log(`   üìù Motivo: ${step.reason}`, 'yellow');
    log(`   ‚è±Ô∏è  Tempo estimado: ${step.estimatedTime}`, 'blue');
  });
}

function generateEnvironmentSummary() {
  logHeader('RESUMO DO AMBIENTE');
  
  const summary = {
    projectName: 'DOM v2',
    currentStrategy: 'Laborat√≥rio de Evolu√ß√£o Cont√≠nua (H√≠brida)',
    duration: '4 semanas (22/07/2025 - 19/08/2025)',
    developmentType: 'Exclusivo por IA',
    userContext: 'Simula√ß√£o de usu√°rios (sem usu√°rios reais)',
    focus: 'Planos de assinatura com micro-frontends',
    currentPhase: 'Semana 1 - Funda√ß√£o Cr√≠tica + Experimento Micro-Frontends',
    criticalIssues: [
      'ESLint sem configura√ß√£o',
      'Testes ausentes no backend',
      'TypeScript inconsistente'
    ],
    implementedFeatures: [
      '3 lacunas cr√≠ticas (Payments, Purchases, Employee Management)',
      'Sistema de mensagens centralizado',
      'Sistema de configura√ß√£o centralizado',
      'Biblioteca UI b√°sica'
    ]
  };
  
  log('üìã INFORMA√á√ïES DO PROJETO:', 'bright');
  Object.entries(summary).forEach(([key, value]) => {
    if (Array.isArray(value)) {
      log(`   ${key}:`, 'cyan');
      value.forEach(item => log(`     ‚Ä¢ ${item}`, 'yellow'));
    } else {
      log(`   ${key}: ${value}`, 'cyan');
    }
  });
}

function generateCommandsReference() {
  logHeader('COMANDOS √öTEIS PARA NOVOS CHATS');
  
  const commands = [
    {
      description: 'Verificar estado atual do projeto',
      command: 'node scripts/test-all-functionalities.js',
      directory: 'C:\\dom-v2'
    },
    {
      description: 'Testar ESLint no frontend (atualmente falha)',
      command: 'npm run lint',
      directory: 'C:\\dom-v2\\frontend'
    },
    {
      description: 'Testar backend (atualmente falha)',
      command: 'npm test',
      directory: 'C:\\dom-v2\\backend'
    },
    {
      description: 'Verificar TypeScript no frontend',
      command: 'npx tsc --noEmit',
      directory: 'C:\\dom-v2\\frontend'
    },
    {
      description: 'Verificar TypeScript no backend',
      command: 'npx tsc --noEmit',
      directory: 'C:\\dom-v2\\backend'
    },
    {
      description: 'Executar script de inicializa√ß√£o',
      command: 'node scripts/init-new-chat.js',
      directory: 'C:\\dom-v2'
    }
  ];
  
  commands.forEach((cmd, index) => {
    logStep(`${index + 1}. ${cmd.description}`, 'info');
    log(`   üìÅ Diret√≥rio: ${cmd.directory}`, 'blue');
    log(`   üíª Comando: ${cmd.command}`, 'green');
  });
}

function generateCriticalDirectives() {
  logHeader('DIRETIVAS CR√çTICAS PARA NOVOS CHATS');
  
  const directives = [
    'SEMPRE usar pensamento cr√≠tico (ver docs/diretivas-pensamento-critico.md)',
    'SEMPRE verificar fatos antes de assumir',
    'SEMPRE executar comandos PowerShell no diret√≥rio correto',
    'SEMPRE documentar mudan√ßas importantes',
    'SEMPRE seguir as especifica√ß√µes t√©cnicas detalhadas',
    'SEMPRE implementar testes junto com funcionalidades',
    'SEMPRE validar antes de prosseguir',
    'SEMPRE considerar m√∫ltiplas perspectivas'
  ];
  
  directives.forEach((directive, index) => {
    logStep(`${index + 1}. ${directive}`, 'warning');
  });
}

function main() {
  logHeader('INICIALIZA√á√ÉO DE NOVO CHAT - DOM v2');
  log('Data: 22/07/2025', 'blue');
  log('Respons√°vel: IA Assistant', 'blue');
  log('Status: Inicializando...', 'blue');
  
  // 1. Validar estrutura do projeto
  const structureValid = validateProjectStructure();
  
  if (!structureValid) {
    log('\n‚ùå ESTRUTURA DO PROJETO INCOMPLETA', 'red');
    log('Por favor, verifique se todos os arquivos necess√°rios est√£o presentes.', 'yellow');
    process.exit(1);
  }
  
  // 2. Carregar arquivos de contexto
  const context = loadContextFiles();
  
  // 3. Validar estado atual
  validateCurrentState();
  
  // 4. Gerar pr√≥ximos passos
  generateNextSteps();
  
  // 5. Gerar resumo do ambiente
  generateEnvironmentSummary();
  
  // 6. Gerar refer√™ncia de comandos
  generateCommandsReference();
  
  // 7. Gerar diretivas cr√≠ticas
  generateCriticalDirectives();
  
  logHeader('INICIALIZA√á√ÉO CONCLU√çDA');
  log('‚úÖ Novo chat pronto para desenvolvimento!', 'bright');
  log('üìö Contexto carregado e validado', 'green');
  log('üéØ Pr√≥ximos passos definidos', 'green');
  log('üõ†Ô∏è Ambiente preparado', 'green');
  
  log('\nüìã ARQUIVOS DE REFER√äNCIA CARREGADOS:', 'bright');
  Object.entries(context).forEach(([file, info]) => {
    log(`   üìÑ ${file} - ${info.description}`, 'cyan');
  });
  
  log('\nüöÄ PR√ìXIMO PASSO RECOMENDADO:', 'bright');
  log('   Implementar configura√ß√£o ESLint (Semana 1 - Dia 1-2)', 'green');
  log('   Ver: docs/instrucoes-implementacao-praticas.md', 'blue');
  
  log('\nüí° DICA:', 'bright');
  log('   Use "node scripts/init-new-chat.js" sempre que precisar recarregar o contexto!', 'yellow');
}

// Executar se chamado diretamente
if (require.main === module) {
  main();
}

module.exports = {
  validateProjectStructure,
  loadContextFiles,
  validateCurrentState,
  generateNextSteps,
  generateEnvironmentSummary,
  generateCommandsReference,
  generateCriticalDirectives
}; 