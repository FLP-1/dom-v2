#!/usr/bin/env node

/**
 * Valida√ß√£o de Estrutura - DOM v2
 * Valida estrutura e organiza√ß√£o do projeto
 */

const fs = require('fs');
const path = require('path');

console.log(`[${new Date().toISOString()}] ` + 'üîç INICIANDO VALIDA√á√ÉO DE ESTRUTURA');
console.log(`[${new Date().toISOString()}] ` + '========================================');

// Fun√ß√£o principal de valida√ß√£o
function validateValida√ß√£odeEstrutura() {
    console.log(`[${new Date().toISOString()}] ` + 'üìä Analisando valida estrutura e organiza√ß√£o do projeto...');
    
    const results = {
        status: 'success',
        score: 0,
        issues: [],
        recommendations: [],
        details: {}
    };
    
    try {
        
        // Validar estrutura do projeto
        const projectStructure = {
            backend: fs.existsSync(path.join(__dirname, '..', 'backend')),
            frontend: fs.existsSync(path.join(__dirname, '..', 'frontend')),
            docs: fs.existsSync(path.join(__dirname, '..', 'docs')),
            scripts: fs.existsSync(path.join(__dirname, '..', 'scripts'))
        };
        
        // Verificar estrutura essencial
        Object.entries(projectStructure).forEach(([dir, exists]) => {
            if (!exists) {
                results.issues.push(`Diret√≥rio essencial ausente: ${dir}`);
            }
        });
        
        // Verificar arquivos essenciais
        const essentialFiles = ['package.json', 'README.md'];
        essentialFiles.forEach(file => {
            if (!fs.existsSync(path.join(__dirname, '..', file))) {
                results.issues.push(`Arquivo essencial ausente: ${file}`);
            }
        });
        
        results.recommendations.push('Organizar estrutura de pastas');
        results.recommendations.push('Padronizar nomenclatura');
        results.recommendations.push('Separar responsabilidades');
            
        
        // Calcular score baseado nos resultados
        results.score = calculateScore(results);
        
    } catch (error) {
        results.status = 'error';
        results.issues.push(`Erro durante valida√ß√£o: ${error.message}`);
    }
    
    return results;
}

// Fun√ß√£o para calcular score
function calculateScore(results) {
    let score = 100;
    
    // Deduzir pontos por cada issue
    score -= results.issues.length * 10;
    
    // Garantir score m√≠nimo
    return Math.max(0, Math.min(100, score));
}


// Executar valida√ß√£o
const result = validateValida√ß√£odeEstrutura();

console.log(`[${new Date().toISOString()}] ` + '\nüìä RESULTADOS:');
console.log(`[${new Date().toISOString()}] ` + `   Status: ${result.status}`);
console.log(`[${new Date().toISOString()}] ` + `   Score: ${result.score}/100`);

if (result.issues.length > 0) {
    console.log(`[${new Date().toISOString()}] ` + '   Issues encontradas:');
    result.issues.forEach(issue => console.log(`[${new Date().toISOString()}] ` + `     - ${issue}`));
}

if (result.recommendations.length > 0) {
    console.log(`[${new Date().toISOString()}] ` + '   Recomenda√ß√µes:');
    result.recommendations.forEach(rec => console.log(`[${new Date().toISOString()}] ` + `     - ${rec}`));
}

console.log(`[${new Date().toISOString()}] ` + '\n‚úÖ VALIDA√á√ÉO CONCLU√çDA!');

module.exports = {
    validateValida√ß√£odeEstrutura,
    calculateScore
};
