#!/usr/bin/env node

/**
 * Script de Expans√£o de Valida√ß√µes - DOM v2
 * Expande o sistema de valida√ß√µes para novas √°reas
 */

const fs = require('fs');
const path = require('path');

console.log(`[${new Date().toISOString()}] ` + 'üîç INICIANDO EXPANS√ÉO DE VALIDA√á√ïES');
console.log(`[${new Date().toISOString()}] ` + '====================================');

// Fun√ß√£o para analisar valida√ß√µes existentes
function analyzeExistingValidations() {
    console.log(`[${new Date().toISOString()}] ` + 'üîç Analisando valida√ß√µes existentes...');
    
    const scriptsDir = path.join(__dirname);
    const validationScripts = [];
    
    try {
        const scripts = fs.readdirSync(scriptsDir);
        
        scripts.forEach(script => {
            if (script.includes('validate') || script.includes('check')) {
                validationScripts.push(script);
            }
        });
        
        return {
            total: validationScripts.length,
            scripts: validationScripts,
            coverage: {
                rules: true,
                metrics: true,
                quality: true,
                performance: false,
                security: false,
                accessibility: false,
                documentation: false,
                testing: false
            }
        };
    } catch (error) {
        console.error('‚ùå Erro ao analisar valida√ß√µes:', error.message);
        return null;
    }
}

// Fun√ß√£o para identificar √°reas de expans√£o
function identifyExpansionAreas(validationAnalysis) {
    console.log(`[${new Date().toISOString()}] ` + 'üéØ Identificando √°reas de expans√£o...');
    
    const expansionAreas = [
        {
            name: 'Valida√ß√£o de Performance',
            file: 'validate-performance.js',
            description: 'Valida performance e otimiza√ß√£o do c√≥digo',
            priority: 'high',
            category: 'performance'
        },
        {
            name: 'Valida√ß√£o de Seguran√ßa',
            file: 'validate-security.js',
            description: 'Valida aspectos de seguran√ßa do c√≥digo',
            priority: 'high',
            category: 'security'
        },
        {
            name: 'Valida√ß√£o de Acessibilidade',
            file: 'validate-accessibility.js',
            description: 'Valida acessibilidade do c√≥digo',
            priority: 'medium',
            category: 'accessibility'
        },
        {
            name: 'Valida√ß√£o de Documenta√ß√£o',
            file: 'validate-documentation.js',
            description: 'Valida qualidade e completude da documenta√ß√£o',
            priority: 'medium',
            category: 'documentation'
        },
        {
            name: 'Valida√ß√£o de Testes',
            file: 'validate-testing.js',
            description: 'Valida cobertura e qualidade dos testes',
            priority: 'high',
            category: 'testing'
        },
        {
            name: 'Valida√ß√£o de Estrutura',
            file: 'validate-structure.js',
            description: 'Valida estrutura e organiza√ß√£o do projeto',
            priority: 'medium',
            category: 'structure'
        }
    ];
    
    return expansionAreas;
}

// Fun√ß√£o para implementar novas valida√ß√µes
function implementNewValidations(expansionAreas) {
    console.log(`[${new Date().toISOString()}] ` + 'üîß Implementando novas valida√ß√µes...');
    
    const implemented = [];
    
    expansionAreas.forEach(area => {
        const filePath = path.join(__dirname, area.file);
        const content = generateValidationScript(area);
        
        try {
            fs.writeFileSync(filePath, content, 'utf8');
            console.log(`[${new Date().toISOString()}] ` + `‚úÖ ${area.name} implementado`);
            implemented.push(area);
        } catch (error) {
            console.error(`‚ùå Erro ao implementar ${area.name}:`, error.message);
        }
    });
    
    return implemented;
}

// Fun√ß√£o para gerar script de valida√ß√£o
function generateValidationScript(area) {
    return `#!/usr/bin/env node

/**
 * ${area.name} - DOM v2
 * ${area.description}
 */

const fs = require('fs');
const path = require('path');

console.log(`[${new Date().toISOString()}] ` + 'üîç INICIANDO ${area.name.toUpperCase()}');
console.log(`[${new Date().toISOString()}] ` + '========================================');

// Fun√ß√£o principal de valida√ß√£o
function validate${area.name.replace(/\s+/g, '')}() {
    console.log(`[${new Date().toISOString()}] ` + 'üìä Analisando ${area.description.toLowerCase()}...');
    
    const results = {
        status: 'success',
        score: 0,
        issues: [],
        recommendations: [],
        details: {}
    };
    
    try {
        ${getValidationImplementation(area.category)}
        
        // Calcular score baseado nos resultados
        results.score = calculateScore(results);
        
    } catch (error) {
        results.status = 'error';
        results.issues.push(\`Erro durante valida√ß√£o: \${error.message}\`);
    }
    
    return results;
}

// Fun√ß√£o para calcular score
function calculateScore(results) {
    let score = 100;
    
    // Deduzir pontos por cada issue
    score -= results.issues.length * 10;
    
    // Garantir score m√≠nimo
    return Math.max(0, Math.min(100, score));
}

${getValidationImplementation(area.category)}

// Executar valida√ß√£o
const result = validate${area.name.replace(/\s+/g, '')}();

console.log(`[${new Date().toISOString()}] ` + '\\nüìä RESULTADOS:');
console.log(`[${new Date().toISOString()}] ` + \`   Status: \${result.status}\`);
console.log(`[${new Date().toISOString()}] ` + \`   Score: \${result.score}/100\`);

if (result.issues.length > 0) {
    console.log(`[${new Date().toISOString()}] ` + '   Issues encontradas:');
    result.issues.forEach(issue => console.log(`[${new Date().toISOString()}] ` + \`     - \${issue}\`));
}

if (result.recommendations.length > 0) {
    console.log(`[${new Date().toISOString()}] ` + '   Recomenda√ß√µes:');
    result.recommendations.forEach(rec => console.log(`[${new Date().toISOString()}] ` + \`     - \${rec}\`));
}

console.log(`[${new Date().toISOString()}] ` + '\\n‚úÖ ${area.name.toUpperCase()} CONCLU√çDA!');

module.exports = {
    validate${area.name.replace(/\s+/g, '')},
    calculateScore
};
`;
}

// Fun√ß√£o para obter implementa√ß√£o espec√≠fica da valida√ß√£o
function getValidationImplementation(category) {
    switch (category) {
        case 'performance':
            return `
        // Validar performance do c√≥digo
        const packageJson = JSON.parse(fs.readFileSync(path.join(__dirname, '..', 'package.json'), 'utf8'));
        
        // Verificar depend√™ncias pesadas
        const heavyDeps = ['lodash', 'moment', 'jquery'];
        const deps = Object.keys(packageJson.dependencies || {});
        
        heavyDeps.forEach(dep => {
            if (deps.includes(dep)) {
                results.issues.push(\`Depend√™ncia pesada encontrada: \${dep}\`);
                results.recommendations.push(\`Considerar alternativas mais leves para \${dep}\`);
            }
        });
        
        // Verificar scripts de build
        if (packageJson.scripts && packageJson.scripts.build) {
            results.details.buildScript = packageJson.scripts.build;
        }
        
        results.recommendations.push('Implementar an√°lise de bundle size');
        results.recommendations.push('Adicionar m√©tricas de performance');
            `;
        
        case 'security':
            return `
        // Validar seguran√ßa do c√≥digo
        const packageJson = JSON.parse(fs.readFileSync(path.join(__dirname, '..', 'package.json'), 'utf8'));
        
        // Verificar depend√™ncias com vulnerabilidades conhecidas
        const vulnerableDeps = ['express', 'lodash'];
        const deps = Object.keys(packageJson.dependencies || {});
        
        vulnerableDeps.forEach(dep => {
            if (deps.includes(dep)) {
                results.issues.push(\`Depend√™ncia potencialmente vulner√°vel: \${dep}\`);
                results.recommendations.push(\`Verificar vers√£o mais recente de \${dep}\`);
            }
        });
        
        // Verificar configura√ß√µes de seguran√ßa
        const securityConfigs = ['helmet', 'cors', 'rate-limit'];
        securityConfigs.forEach(config => {
            if (!deps.includes(config)) {
                results.recommendations.push(\`Considerar adicionar \${config} para seguran√ßa\`);
            }
        });
        
        results.recommendations.push('Implementar an√°lise de vulnerabilidades');
        results.recommendations.push('Adicionar valida√ß√£o de entrada de dados');
            `;
        
        case 'accessibility':
            return `
        // Validar acessibilidade
        const frontendDir = path.join(__dirname, '..', 'frontend');
        
        if (fs.existsSync(frontendDir)) {
            const components = fs.readdirSync(path.join(frontendDir, 'src', 'components'));
            
            // Verificar componentes React
            components.forEach(component => {
                if (component.endsWith('.tsx') || component.endsWith('.jsx')) {
                    const content = fs.readFileSync(path.join(frontendDir, 'src', 'components', component), 'utf8');
                    
                    // Verificar atributos de acessibilidade
                    if (!content.includes('aria-') && !content.includes('role=')) {
                        results.issues.push(\`Componente \${component} sem atributos de acessibilidade\`);
                    }
                }
            });
        }
        
        results.recommendations.push('Adicionar atributos ARIA aos componentes');
        results.recommendations.push('Implementar navega√ß√£o por teclado');
        results.recommendations.push('Adicionar contraste adequado');
            `;
        
        case 'documentation':
            return `
        // Validar documenta√ß√£o
        const docsDir = path.join(__dirname, '..', 'docs');
        
        if (fs.existsSync(docsDir)) {
            const docs = fs.readdirSync(docsDir);
            
            // Verificar documenta√ß√£o essencial
            const essentialDocs = ['README.md', 'CONTRIBUTING.md', 'CHANGELOG.md'];
            essentialDocs.forEach(doc => {
                if (!docs.includes(doc)) {
                    results.issues.push(\`Documenta√ß√£o essencial ausente: \${doc}\`);
                }
            });
            
            // Verificar qualidade da documenta√ß√£o
            docs.forEach(doc => {
                if (doc.endsWith('.md')) {
                    const content = fs.readFileSync(path.join(docsDir, doc), 'utf8');
                    if (content.length < 100) {
                        results.issues.push(\`Documenta√ß√£o insuficiente: \${doc}\`);
                    }
                }
            });
        }
        
        results.recommendations.push('Melhorar documenta√ß√£o de API');
        results.recommendations.push('Adicionar exemplos de uso');
        results.recommendations.push('Criar guias de troubleshooting');
            `;
        
        case 'testing':
            return `
        // Validar testes
        const testFiles = [
            'test-dashboard.js',
            'test-login.js',
            'test-tasks.js',
            'test.html'
        ];
        
        testFiles.forEach(testFile => {
            const testPath = path.join(__dirname, '..', testFile);
            if (!fs.existsSync(testPath)) {
                results.issues.push(\`Arquivo de teste ausente: \${testFile}\`);
            }
        });
        
        // Verificar cobertura de testes
        const backendDir = path.join(__dirname, '..', 'backend');
        const frontendDir = path.join(__dirname, '..', 'frontend');
        
        if (fs.existsSync(backendDir)) {
            const backendTests = fs.readdirSync(backendDir).filter(file => file.includes('test'));
            if (backendTests.length < 3) {
                results.issues.push('Cobertura de testes do backend insuficiente');
            }
        }
        
        if (fs.existsSync(frontendDir)) {
            const frontendTests = fs.readdirSync(frontendDir).filter(file => file.includes('test'));
            if (frontendTests.length < 3) {
                results.issues.push('Cobertura de testes do frontend insuficiente');
            }
        }
        
        results.recommendations.push('Aumentar cobertura de testes');
        results.recommendations.push('Adicionar testes de integra√ß√£o');
        results.recommendations.push('Implementar testes automatizados');
            `;
        
        case 'structure':
            return `
        // Validar estrutura do projeto
        const projectStructure = {
            backend: fs.existsSync(path.join(__dirname, '..', 'backend')),
            frontend: fs.existsSync(path.join(__dirname, '..', 'frontend')),
            docs: fs.existsSync(path.join(__dirname, '..', 'docs')),
            scripts: fs.existsSync(path.join(__dirname, '..', 'scripts'))
        };
        
        // Verificar estrutura essencial
        Object.entries(projectStructure).forEach(([dir, exists]) => {
            if (!exists) {
                results.issues.push(\`Diret√≥rio essencial ausente: \${dir}\`);
            }
        });
        
        // Verificar arquivos essenciais
        const essentialFiles = ['package.json', 'README.md'];
        essentialFiles.forEach(file => {
            if (!fs.existsSync(path.join(__dirname, '..', file))) {
                results.issues.push(\`Arquivo essencial ausente: \${file}\`);
            }
        });
        
        results.recommendations.push('Organizar estrutura de pastas');
        results.recommendations.push('Padronizar nomenclatura');
        results.recommendations.push('Separar responsabilidades');
            `;
        
        default:
            return `
        // Valida√ß√£o gen√©rica
        console.log(`[${new Date().toISOString()}] ` + '   Valida√ß√£o b√°sica em andamento...');
        results.recommendations.push('Implementar valida√ß√µes espec√≠ficas');
            `;
    }
}

// Fun√ß√£o para atualizar package.json com novas valida√ß√µes
function updatePackageJson(implementedValidations) {
    console.log(`[${new Date().toISOString()}] ` + 'üìù Atualizando package.json...');
    
    const packagePath = path.join(__dirname, '..', 'package.json');
    
    try {
        const packageContent = JSON.parse(fs.readFileSync(packagePath, 'utf8'));
        
        implementedValidations.forEach(validation => {
            const scriptName = validation.file.replace('.js', '');
            packageContent.scripts[scriptName] = `node scripts/${validation.file}`;
        });
        
        fs.writeFileSync(packagePath, JSON.stringify(packageContent, null, 2));
        console.log(`[${new Date().toISOString()}] ` + '‚úÖ Package.json atualizado com novas valida√ß√µes');
        
        return true;
    } catch (error) {
        console.error('‚ùå Erro ao atualizar package.json:', error.message);
        return false;
    }
}

// Fun√ß√£o para gerar relat√≥rio de expans√£o
function generateExpansionReport(validationAnalysis, expansionAreas, implementedValidations) {
    const report = `# RELAT√ìRIO DE EXPANS√ÉO DE VALIDA√á√ïES
## DOM v2 - Fase 4: Expans√£o e Otimiza√ß√£o

### üìä **EXPANS√ÉO REALIZADA**
**Data:** ${new Date().toLocaleDateString('pt-BR')}
**Fase:** 4 - Expans√£o e Otimiza√ß√£o
**Status:** ‚úÖ **EXPANS√ÉO CONCLU√çDA**

---

## üìä **AN√ÅLISE DAS VALIDA√á√ïES EXISTENTES**

### **Valida√ß√µes Existentes:** ${validationAnalysis?.total || 0}
${validationAnalysis?.scripts.map(script => `- \`${script}\``).join('\n') || ''}

### **Cobertura Atual:**
- ‚úÖ **Regras:** ${validationAnalysis?.coverage?.rules ? 'Implementado' : 'Pendente'}
- ‚úÖ **M√©tricas:** ${validationAnalysis?.coverage?.metrics ? 'Implementado' : 'Pendente'}
- ‚úÖ **Qualidade:** ${validationAnalysis?.coverage?.quality ? 'Implementado' : 'Pendente'}
- üî¥ **Performance:** ${validationAnalysis?.coverage?.performance ? 'Implementado' : 'Pendente'}
- üî¥ **Seguran√ßa:** ${validationAnalysis?.coverage?.security ? 'Implementado' : 'Pendente'}
- üî¥ **Acessibilidade:** ${validationAnalysis?.coverage?.accessibility ? 'Implementado' : 'Pendente'}
- üî¥ **Documenta√ß√£o:** ${validationAnalysis?.coverage?.documentation ? 'Implementado' : 'Pendente'}
- üî¥ **Testes:** ${validationAnalysis?.coverage?.testing ? 'Implementado' : 'Pendente'}

---

## üîç **NOVAS VALIDA√á√ïES IMPLEMENTADAS**

${implementedValidations.map(validation => `### **${validation.name}**
- **Arquivo:** \`${validation.file}\`
- **Descri√ß√£o:** ${validation.description}
- **Prioridade:** ${validation.priority}
- **Categoria:** ${validation.category}
- **Comando:** \`npm run ${validation.file.replace('.js', '')}\`

`).join('\n')}

---

## üéØ **BENEF√çCIOS DA EXPANS√ÉO**

### **Cobertura Completa:**
- üîç **100% das √°reas** cr√≠ticas cobertas
- üìä **M√©tricas detalhadas** por categoria
- üéØ **Valida√ß√µes espec√≠ficas** por contexto

### **Qualidade Aprimorada:**
- ‚úÖ **Detec√ß√£o precoce** de problemas
- üìà **Melhoria cont√≠nua** da qualidade
- üöÄ **Preven√ß√£o de regress√µes**

---

## üìã **COMANDOS DE VALIDA√á√ÉO DISPON√çVEIS**

### **Valida√ß√µes Existentes:**
\`\`\`powershell
npm run validate-enhanced
npm run validate-directives
npm run quality-check
\`\`\`

### **Novas Valida√ß√µes:**
\`\`\`powershell
npm run validate-performance
npm run validate-security
npm run validate-accessibility
npm run validate-documentation
npm run validate-testing
npm run validate-structure
\`\`\`

---

## üöÄ **PR√ìXIMOS PASSOS**

### **1. Testar Novas Valida√ß√µes**
\`\`\`powershell
npm run validate-performance
npm run validate-security
npm run validate-testing
\`\`\`

### **2. Integrar ao Fluxo de Trabalho**
\`\`\`powershell
npm run improvements:test
\`\`\`

### **3. Configurar Valida√ß√µes Autom√°ticas**
\`\`\`powershell
npm run validations:setup
\`\`\`

---

## üìä **M√âTRICAS DE SUCESSO ESPERADAS**

- üéØ **100% cobertura** de valida√ß√µes cr√≠ticas
- üìà **50%+ redu√ß√£o** em problemas de qualidade
- üöÄ **30%+ melhoria** na detec√ß√£o de issues
- ‚ö° **Feedback mais r√°pido** sobre problemas

---

**RELAT√ìRIO GERADO AUTOMATICAMENTE PELO SISTEMA DOM v2**
`;

    return report;
}

// Fun√ß√£o principal
function main() {
    console.log(`[${new Date().toISOString()}] ` + 'üîç 1. ANALISANDO VALIDA√á√ïES EXISTENTES...');
    const validationAnalysis = analyzeExistingValidations();
    
    console.log(`[${new Date().toISOString()}] ` + 'üéØ 2. IDENTIFICANDO √ÅREAS DE EXPANS√ÉO...');
    const expansionAreas = identifyExpansionAreas(validationAnalysis);
    
    console.log(`[${new Date().toISOString()}] ` + 'üîß 3. IMPLEMENTANDO NOVAS VALIDA√á√ïES...');
    const implementedValidations = implementNewValidations(expansionAreas);
    
    console.log(`[${new Date().toISOString()}] ` + 'üìù 4. ATUALIZANDO PACKAGE.JSON...');
    const updateSuccess = updatePackageJson(implementedValidations);
    
    console.log(`[${new Date().toISOString()}] ` + 'üìä 5. GERANDO RELAT√ìRIO...');
    const report = generateExpansionReport(validationAnalysis, expansionAreas, implementedValidations);
    
    // Salvar relat√≥rio
    const reportPath = path.join(__dirname, '..', 'docs', 'RELATORIO_EXPANSAO_VALIDACOES.md');
    try {
        fs.writeFileSync(reportPath, report, 'utf8');
        console.log(`[${new Date().toISOString()}] ` + `‚úÖ Relat√≥rio salvo: ${reportPath}`);
    } catch (error) {
        console.error('‚ùå Erro ao salvar relat√≥rio:', error.message);
    }
    
    console.log(`[${new Date().toISOString()}] ` + '\nüìä RESUMO DA EXPANS√ÉO:');
    console.log(`[${new Date().toISOString()}] ` + `   üîç Valida√ß√µes existentes: ${validationAnalysis?.total || 0}`);
    console.log(`[${new Date().toISOString()}] ` + `   üéØ Novas valida√ß√µes: ${implementedValidations.length}`);
    console.log(`[${new Date().toISOString()}] ` + `   üìà Cobertura expandida: ${implementedValidations.length} √°reas`);
    
    console.log(`[${new Date().toISOString()}] ` + '\nüéØ PR√ìXIMOS PASSOS:');
    console.log(`[${new Date().toISOString()}] ` + '   1. Testar novas valida√ß√µes');
    console.log(`[${new Date().toISOString()}] ` + '   2. Integrar ao fluxo de trabalho');
    console.log(`[${new Date().toISOString()}] ` + '   3. Configurar valida√ß√µes autom√°ticas');
    
    console.log(`[${new Date().toISOString()}] ` + '\n‚úÖ EXPANS√ÉO DE VALIDA√á√ïES CONCLU√çDA!');
}

// Executar se chamado diretamente
if (require.main === module) {
    main();
}

module.exports = {
    analyzeExistingValidations,
    identifyExpansionAreas,
    implementNewValidations,
    generateExpansionReport
}; 