/**
 * @fileoverview Script de teste para valida√ß√£o CPF/CNPJ
 * @directory dom-v2
 * @description Testa a valida√ß√£o de d√≠gito verificador do componente CPFCNPJInput
 * @created 2025-07-23
 * @lastModified 2025-07-23
 * @author DOM Team v2
 */

// Fun√ß√µes de valida√ß√£o extra√≠das do componente CPFCNPJInput
const cleanDocument = (document) => {
  return document.replace(/\D/g, '');
};

const validateCPF = (cpf) => {
  const cleaned = cleanDocument(cpf);
  
  if (cleaned.length !== 11) return false;
  if (/^(\d)\1{10}$/.test(cleaned)) return false; // Todos os d√≠gitos iguais
  
  let sum = 0;
  for (let i = 0; i < 9; i++) {
    sum += parseInt(cleaned.charAt(i)) * (10 - i);
  }
  let remainder = (sum * 10) % 11;
  if (remainder === 10 || remainder === 11) remainder = 0;
  if (remainder !== parseInt(cleaned.charAt(9))) return false;
  
  sum = 0;
  for (let i = 0; i < 10; i++) {
    sum += parseInt(cleaned.charAt(i)) * (11 - i);
  }
  remainder = (sum * 10) % 11;
  if (remainder === 10 || remainder === 11) remainder = 0;
  if (remainder !== parseInt(cleaned.charAt(10))) return false;
  
  return true;
};

const validateCNPJ = (cnpj) => {
  const cleaned = cleanDocument(cnpj);
  
  if (cleaned.length !== 14) return false;
  if (/^(\d)\1{13}$/.test(cleaned)) return false; // Todos os d√≠gitos iguais
  
  // Valida√ß√£o do primeiro d√≠gito verificador
  let sum = 0;
  let weight = 2;
  for (let i = 11; i >= 0; i--) {
    sum += parseInt(cleaned.charAt(i)) * weight;
    weight = weight === 9 ? 2 : weight + 1;
  }
  let remainder = sum % 11;
  let digit1 = remainder < 2 ? 0 : 11 - remainder;
  if (digit1 !== parseInt(cleaned.charAt(12))) return false;
  
  // Valida√ß√£o do segundo d√≠gito verificador
  sum = 0;
  weight = 2;
  for (let i = 12; i >= 0; i--) {
    sum += parseInt(cleaned.charAt(i)) * weight;
    weight = weight === 9 ? 2 : weight + 1;
  }
  remainder = sum % 11;
  let digit2 = remainder < 2 ? 0 : 11 - remainder;
  if (digit2 !== parseInt(cleaned.charAt(13))) return false;
  
  return true;
};

// Casos de teste
const testCases = {
  cpf: {
    valid: [
      '111.444.777-35', // CPF v√°lido conhecido
      '123.456.789-09', // CPF v√°lido conhecido
      '529.982.247-25'  // CPF v√°lido conhecido
    ],
    invalid: [
      '111.111.111-12', // CPF inv√°lido (todos iguais, mas d√≠gitos errados)
      '123.456.789-10', // CPF inv√°lido
      '000.000.000-00', // CPF inv√°lido
      '111.444.777-34', // CPF inv√°lido (d√≠gito errado)
      '123.456.789-00', // CPF inv√°lido
      'abc.def.ghi-jk', // CPF inv√°lido (letras)
      '123.456.789',    // CPF inv√°lido (incompleto)
      '123.456.789-091', // CPF inv√°lido (muito longo)
      ''                 // CPF vazio
    ]
  },
  cnpj: {
    valid: [
      '11.222.333/0001-81', // CNPJ v√°lido conhecido
      '00.000.000/0001-91', // CNPJ v√°lido conhecido
      '11.444.777/0001-61'  // CNPJ v√°lido conhecido
    ],
    invalid: [
      '11.222.333/0001-82', // CNPJ inv√°lido (d√≠gito errado)
      '00.000.000/0001-92', // CNPJ inv√°lido (d√≠gito errado)
      '11.111.111/1111-12', // CNPJ inv√°lido (todos iguais, mas d√≠gitos errados)
      '123.456.789/0001-00', // CNPJ inv√°lido
      'abc.def.ghi/0001-jk', // CNPJ inv√°lido (letras)
      '11.222.333/0001',     // CNPJ inv√°lido (incompleto)
      '11.222.333/0001-811', // CNPJ inv√°lido (muito longo)
      ''                     // CNPJ vazio
    ]
  }
};

// Fun√ß√£o de teste
const runValidationTests = () => {
  console.log('üß™ TESTE DE VALIDA√á√ÉO CPF/CNPJ - DOM v2\n');
  console.log('=' .repeat(60));
  
  let totalTests = 0;
  let passedTests = 0;
  
  // Testar CPFs v√°lidos
  console.log('\nüìã TESTANDO CPFs V√ÅLIDOS:');
  testCases.cpf.valid.forEach(cpf => {
    totalTests++;
    const isValid = validateCPF(cpf);
    const status = isValid ? '‚úÖ' : '‚ùå';
    console.log(`${status} ${cpf} -> ${isValid ? 'V√ÅLIDO' : 'INV√ÅLIDO'}`);
    if (isValid) passedTests++;
  });
  
  // Testar CPFs inv√°lidos
  console.log('\nüìã TESTANDO CPFs INV√ÅLIDOS:');
  testCases.cpf.invalid.forEach(cpf => {
    totalTests++;
    const isValid = validateCPF(cpf);
    const status = !isValid ? '‚úÖ' : '‚ùå';
    console.log(`${status} ${cpf} -> ${isValid ? 'V√ÅLIDO' : 'INV√ÅLIDO'}`);
    if (!isValid) passedTests++;
  });
  
  // Testar CNPJs v√°lidos
  console.log('\nüìã TESTANDO CNPJs V√ÅLIDOS:');
  testCases.cnpj.valid.forEach(cnpj => {
    totalTests++;
    const isValid = validateCNPJ(cnpj);
    const status = isValid ? '‚úÖ' : '‚ùå';
    console.log(`${status} ${cnpj} -> ${isValid ? 'V√ÅLIDO' : 'INV√ÅLIDO'}`);
    if (isValid) passedTests++;
  });
  
  // Testar CNPJs inv√°lidos
  console.log('\nüìã TESTANDO CNPJs INV√ÅLIDOS:');
  testCases.cnpj.invalid.forEach(cnpj => {
    totalTests++;
    const isValid = validateCNPJ(cnpj);
    const status = !isValid ? '‚úÖ' : '‚ùå';
    console.log(`${status} ${cnpj} -> ${isValid ? 'V√ÅLIDO' : 'INV√ÅLIDO'}`);
    if (!isValid) passedTests++;
  });
  
  // Resultados
  console.log('\n' + '=' .repeat(60));
  console.log('üìä RESULTADOS DOS TESTES:');
  console.log(`Total de testes: ${totalTests}`);
  console.log(`Testes aprovados: ${passedTests}`);
  console.log(`Taxa de sucesso: ${((passedTests / totalTests) * 100).toFixed(1)}%`);
  
  if (passedTests === totalTests) {
    console.log('\nüéâ TODOS OS TESTES PASSARAM!');
    console.log('‚úÖ A valida√ß√£o de d√≠gito verificador est√° funcionando corretamente.');
  } else {
    console.log('\n‚ö†Ô∏è  ALGUNS TESTES FALHARAM!');
    console.log('‚ùå H√° problemas na valida√ß√£o de d√≠gito verificador.');
  }
  
  console.log('\nüîç DETALHES DA VALIDA√á√ÉO:');
  console.log('‚Ä¢ CPF: Valida√ß√£o dos 2 d√≠gitos verificadores');
  console.log('‚Ä¢ CNPJ: Valida√ß√£o dos 2 d√≠gitos verificadores');
  console.log('‚Ä¢ Formata√ß√£o autom√°tica durante digita√ß√£o');
  console.log('‚Ä¢ Feedback visual em tempo real');
  console.log('‚Ä¢ Preven√ß√£o de dados inv√°lidos no sistema');
};

// Executar testes
runValidationTests(); 